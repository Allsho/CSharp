// Script Main
public void Main()
{
    string connString = Dts.Variables["User::CM_OLEDB_RADB"].Value.ToString();
    string folderPath = Dts.Variables["User::folderOutboundYaleHealth"].Value.ToString();

    const int maxConcurrentTasks = 5;
    using (var semaphore = new SemaphoreSlim(maxConcurrentTasks))
    {
        try
        {
            using (var conn = SqlHelper.CreateConnection(connString))
            {
                var configurations = ConfigLoader.LoadConfigurations(conn);

                // Separate critical and non-critical tasks
                var criticalTasks = configurations.Where(c => c.IsCritical).OrderBy(c => c.EtlProcessingOrder).ToList();
                var nonCriticalTasks = configurations.Where(c => !c.IsCritical).ToList();

                // Process critical tasks sequentially
                foreach (var config in criticalTasks)
                {
                    TaskRunner.RetryTask(() => TaskRunner.ExecuteTask(connString, config, folderPath), 3, config.WaitTimeMinutes);
                }

                // Process non-critical tasks in parallel
                var tasks = new List<System.Threading.Tasks.Task>();
                foreach (var config in nonCriticalTasks)
                {
                    tasks.Add(TaskRunner.RunTaskAsync(semaphore, connString, config, folderPath));
                }

                System.Threading.Tasks.Task.WaitAll(tasks.ToArray());
                Dts.TaskResult = (int)ScriptResults.Success;
            }
        }
        catch (Exception ex)
        {
            Dts.Events.FireError(0, "SSIS Script Task", $"Critical error: {ex.Message}\nStackTrace: {ex.StackTrace}", string.Empty, 0);
            Dts.TaskResult = (int)ScriptResults.Failure;
        }
    }
}

//ConfigLoader.cs
internal static class ConfigLoader
{
    internal static List<StoredProcConfig> LoadConfigurations(SqlConnection conn)
    {
        const string query = @"
                SELECT 
                    Clarity_ObjectName,
                    EtlProcessStep,
                    EtlProcessingOrder,
                    EtlOutputFileName,
                    StoredProcedureName,
                    StoredProcedureExecuteStatement,
                    IsCritical,
                    MaxFileSize,
                    WaitTimeMinutes,
                    IsActive,
                    RetryAttempts
                FROM YHP.YaleHealth_ETL_Objects
                WHERE
                    StoredProcedureName IS NOT NULL
                    AND IsActive = 1
                ORDER BY 
                    IsCritical DESC, 
                    EtlProcessingOrder;";

        var configurations = new List<StoredProcConfig>();
        try
        {
            using (var cmd = new SqlCommand(query, conn))
            {
                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        configurations.Add(new StoredProcConfig
                        {
                            StoredProcName = reader["StoredProcedureName"].ToString(),
                            FileNameTemplate = reader["EtlOutputFileName"].ToString(),
                            MaxFileLength = Convert.ToInt32(reader["MaxFileSize"]),
                            IsCritical = Convert.ToBoolean(reader["IsCritical"]),
                            EtlProcessingOrder = Convert.ToInt32(reader["EtlProcessingOrder"]),
                            WaitTimeMinutes = Convert.ToInt32(reader["WaitTimeMinutes"]),
                            RetryAttempts = Convert.ToInt32(reader["RetryAttempts"])
                        });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogExecution(conn, "LoadConfigurations", "Failure", $"Failed to load configurations: {ex.Message}", stackTrace: ex.StackTrace);
        }
        return configurations;
    }
}

// Logger.cs
internal static class Logger
{
    internal static void LogExecution(SqlConnection conn, string storedProcName, string status, string message,
                                        int bytesWritten = 0, int fileCounter = 0, double? writeDuration = null, string stackTrace = null, int logId = 0)
    {
        const string logQuery = @"
                INSERT INTO dbo.YaleHealthExecutionLog 
                (StoredProcName, ExecutionStatus, Message, StackTrace, BytesWritten, FileCounter, WriteDurationMilliseconds, LogDate, DBLogId)
                VALUES (@StoredProcName, @ExecutionStatus, @Message, @StackTrace, @BytesWritten, @FileCounter, @WriteDuration, GETDATE(), @LogId)";

        using (var logCmd = new SqlCommand(logQuery, conn))
        {
            logCmd.Parameters.AddWithValue("@StoredProcName", storedProcName);
            logCmd.Parameters.AddWithValue("@ExecutionStatus", status);
            logCmd.Parameters.AddWithValue("@Message", message);
            logCmd.Parameters.AddWithValue("@StackTrace", (object)stackTrace ?? DBNull.Value);
            logCmd.Parameters.AddWithValue("@BytesWritten", bytesWritten);
            logCmd.Parameters.AddWithValue("@FileCounter", fileCounter);
            logCmd.Parameters.AddWithValue("@WriteDuration", writeDuration.HasValue ? writeDuration.Value : (object)DBNull.Value);
            logCmd.Parameters.AddWithValue("@LogId", logId);
            logCmd.ExecuteNonQuery();
        }
    }
}

// SqlHelper.cs
internal static class SqlHelper
{
    internal static SqlConnection CreateConnection(string connString)
    {
        var conn = new SqlConnection(connString);
        conn.Open();
        return conn;

    }
       
}

// StoredProcConfig.cs
internal class StoredProcConfig
{
    public string StoredProcName { get; set; }
    public string FileNameTemplate { get; set; }
    public int MaxFileLength { get; set; }
    public bool IsCritical { get; set; }
    public int EtlProcessingOrder { get; set; }    
    public int WaitTimeMinutes { get; set; }
    public int RetryAttempts {  get; set; }
}

// StoredProcExecutor.cs
internal static class StoredProcExecutor
{
    /// <summary>
    /// Executes a stored procedure and exports the results to a file.
    /// </summary>
    /// <param name="conn">An open SQL connection.</param>
    /// <param name="storedProcName"></param>
    /// <param name="folderPath">Path to the folder where the output files will be stored.</param>
    /// <param name="fileNameTemplate"></param>
    /// <param name="maxFileLength"></param>
    internal static void ExecuteAndExport(SqlConnection conn, string storedProcName, string folderPath,
                                            string fileNameTemplate, int maxFileLength)
    {
        int fileCounter = 1;
        int bytesWritten = 0;
        var buffer = new StringBuilder(8192);
        bool headerWritten = false;
        bool hasData = false; // Track if the procedure returned any rows

        try
        {
            using (var cmd = new SqlCommand(storedProcName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;

                // Set parameters to NULL
                cmd.Parameters.AddWithValue("@DateStarting", DBNull.Value);
                cmd.Parameters.AddWithValue("@DateEnding", DBNull.Value);
                cmd.Parameters.AddWithValue("@CustomParameter1", DBNull.Value);
                cmd.Parameters.AddWithValue("@CustomParameter2", DBNull.Value);
                cmd.Parameters.AddWithValue("@DEBUG_FLAG", DBNull.Value);
                var logIdParam = new SqlParameter("@LOG_ID", SqlDbType.Int) { Direction = ParameterDirection.Output };
                cmd.Parameters.Add(logIdParam);

                // Add return value parameter
                var returnCodeParam = new SqlParameter("@RC", SqlDbType.Int)
                {
                    Direction = ParameterDirection.ReturnValue
                };
                cmd.Parameters.Add(returnCodeParam);

                Console.WriteLine($"Executing stored procedure: {storedProcName}");
                var procStopwatch = Stopwatch.StartNew();

                //// Execute the stored procedure
                //cmd.ExecuteNonQuery();

                //// Retrieve the return code
                //int returnCode = (int)returnCodeParam.Value;
                //int logId = logIdParam.Value != DBNull.Value ? (int)logIdParam.Value : 0;

                //// Check return code
                //if (returnCode != 0)
                //{
                //    Console.WriteLine($"Stored procedure {storedProcName} failed with return code {returnCode}.");
                //    Logger.LogExecution(conn, storedProcName, "Failure", $"Stored procedure returned {returnCode}", bytesWritten, fileCounter, 0);


                //    return; // Stop further execution
                //}

                // If return code is 0, proceed with exporting data
                using (var reader = cmd.ExecuteReader())
                {
                    if (reader.HasRows) // If the procedure returns data, process it
                    {
                        while (reader.Read())
                        {
                            if (!headerWritten)
                            {
                                WriteHeader(reader, buffer);
                                bytesWritten += Encoding.UTF8.GetByteCount(buffer.ToString());
                                headerWritten = true;
                            }

                            string row = FormatRow(reader);
                            bytesWritten += Encoding.UTF8.GetByteCount(row + Environment.NewLine);
                            buffer.AppendLine(row);
                            hasData = true; // Mark that data was found

                            if (bytesWritten >= maxFileLength)
                            {
                                FlushBuffer(buffer, folderPath, fileNameTemplate, fileCounter++);
                                bytesWritten = 0;
                                headerWritten = false;
                            }
                        }
                    }

                    // If no data was found but columns exist, output only the headers
                    if (!hasData && reader.FieldCount > 0)
                    {
                        WriteHeader(reader, buffer);
                        FlushBuffer(buffer, folderPath, fileNameTemplate, fileCounter);
                    }

                    if (buffer.Length > 0)
                    {
                        FlushBuffer(buffer, folderPath, fileNameTemplate, fileCounter);
                    }
                }
                // Retrieve the return code
                int returnCode = (int)returnCodeParam.Value;
                int logId = logIdParam.Value != DBNull.Value ? (int)logIdParam.Value : 0;

                // Check return code
                if (returnCode != 0)
                {
                    Console.WriteLine($"Stored procedure {storedProcName} failed with return code {returnCode}.");
                    Logger.LogExecution(conn, storedProcName, "Failure", $"Stored procedure returned {returnCode}", bytesWritten, fileCounter, 0);


                    return; // Stop further execution
                }
                
                Logger.LogExecution(conn, storedProcName, "Success", "Success", bytesWritten, fileCounter, procStopwatch.ElapsedMilliseconds, logId: logIdParam.Value != DBNull.Value ? (int)logIdParam.Value: 0);
            }
        }
        catch (Exception ex)
        {
            Logger.LogExecution(conn, storedProcName, "Failure", ex.Message, bytesWritten, fileCounter, 0, ex.StackTrace);
            throw;
        }
    }

    internal static void WriteHeader(SqlDataReader reader, StringBuilder buffer)
    {
        for (int i = 0; i < reader.FieldCount; i++)
        {
            if (i > 0) buffer.Append("|");
            buffer.Append(reader.GetName(i));
        }
        buffer.AppendLine();
    }

    internal static string FormatRow(SqlDataReader reader)
    {
        var row = new StringBuilder();
        for (int i = 0; i < reader.FieldCount; i++)
        {
            if (i > 0) row.Append("|");
            string value = reader.IsDBNull(i) ? string.Empty : reader.GetValue(i).ToString().Replace("\"", "'");
            row.Append($"\"{value}\"");
        }
        return row.ToString();
    }

    internal static void FlushBuffer(StringBuilder buffer, string folderPath, string fileNameTemplate, int fileCounter)
    {
        string fileName = fileNameTemplate
            .Replace("{YYYYMMDD}", DateTime.Now.ToString("yyyyMMdd"))
            .Replace("{0}", fileCounter.ToString());

        string filePath = Path.Combine(folderPath, fileName);

        using (var writer = new StreamWriter(filePath, false, Encoding.UTF8, 8192))
        {
            writer.Write(buffer);
            buffer.Clear();
        }

    }
}

// TaskRunner.cs
internal static class TaskRunner
{
    internal static async System.Threading.Tasks.Task RunTaskAsync(SemaphoreSlim semaphore, string connString, StoredProcConfig config, string folderPath)
    {
        await semaphore.WaitAsync();
        try
        {
            RetryTask(() => ExecuteTask(connString, config, folderPath), 3, config.WaitTimeMinutes);
        }
        finally
        {
            semaphore.Release();
        }
    }

    internal static async void RetryTask(Action taskAction, int maxRetries, int waitTimeMinutes)
    {
        int attempts = 0;
        while (attempts < maxRetries)
        {
            try
            {
                taskAction();
                return; // Exit the loop if the task succeeds
            }
            catch (Exception ex)
            {
                attempts++;
                //Add a LogRetryAttempt(attempts, ex.Message);
                if (attempts >= maxRetries)
                {
                    throw new Exception($"Task failed after {maxRetries} attempts: {ex.Message}", ex);
                }
                // Wait before retrying async
                await Task.Delay(TimeSpan.FromMinutes(waitTimeMinutes));
            }
        }
    }

    internal static void ExecuteTask(string connString, StoredProcConfig config, string folderPath)
    {
        try
        {
            using (var conn = SqlHelper.CreateConnection(connString))
            {
                StoredProcExecutor.ExecuteAndExport(
                    conn,
                    config.StoredProcName,
                    folderPath,
                    config.FileNameTemplate,
                    config.MaxFileLength);
            }
        }
        catch (Exception ex)
        {
            using (var conn = SqlHelper.CreateConnection(connString))
            {
                Logger.LogExecution(conn, config.StoredProcName, "Failure", ex.Message, stackTrace: ex.StackTrace);
            }
            throw; // Rethrow to enable retry logic
        }
    }
}
