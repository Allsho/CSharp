public void ApplyDataTypeConversions(DataTable dt, List<ColumnMapping> colMappings)
{
    foreach (var map in colMappings)
    {
        if (string.IsNullOrWhiteSpace(map.DataType)) continue;
        string colName = map.TargetColumn;

        if (!dt.Columns.Contains(colName)) continue;

        foreach (DataRow row in dt.Rows)
        {
            object value = row[colName];

            if (value == null || value == DBNull.Value) continue;

            string strValue = value.ToString().Trim();

            try
            {
                switch (map.DataType.ToLower())
                {
                    case "date":
                    case "datetime":
                        if (DateTime.TryParse(strValue, out DateTime parsedDate))
                        {
                            row[colName] = parsedDate.ToString("yyyy-MM-dd");
                        }
                        else if (double.TryParse(strValue, out double serialVal))
                        {
                            // Excel serial number logic
                            if (serialVal >= 10000 && serialVal <= 60000)
                            {
                                DateTime convertedDate = DateTime.FromOADate(serialVal);
                                row[colName] = convertedDate.ToString("yyyy-MM-dd");
                            }
                        }
                        break;

                    case "int":
                    case "integer":
                        if (int.TryParse(strValue, out int intVal))
                            row[colName] = intVal;
                        else
                            row[colName] = DBNull.Value;
                        break;

                    case "decimal":
                    case "float":
                    case "double":
                        if (double.TryParse(strValue, out double dblVal))
                            row[colName] = dblVal;
                        else
                            row[colName] = DBNull.Value;
                        break;

                    case "string":
                    case "varchar":
                        // No conversion needed
                        break;

                    default:
                        // Unknown or unsupported type
                        break;
                }
            }
            catch
            {
                // Optional: log failed conversions
            }
        }
    }
}



MapColumns(data, colMappings, conn.ConnectionString);
ApplyDataTypeConversions(data, colMappings);  // <- Add this here
LogTruncationIssues(data, mapping.TargetTable, conn);

