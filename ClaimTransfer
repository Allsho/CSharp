public static class GetLogSummary
{
    public static string GenerateHtmlSummary(string payerName, Variables vars)
    {
        var connStr = vars["User::CM_OLEDB_ClaimsStage"].Value.ToString();
        var entries = new List<FileLogEntry>();

        using (var conn = new SqlConnection(connStr))
        {
            conn.Open();

            // Get the latest ProcessedAt timestamp for this PayerName
            string latestTimeQuery = @"
                SELECT MAX(ProcessedAt) 
                FROM MoveIt.FileTransferLog
                WHERE MappingID = (SELECT MappingID FROM MoveIt.EmailAddresses WHERE PayerName = @PayerName)";

            DateTime? latestProcessedAt = null;
            using (var cmd = new SqlCommand(latestTimeQuery, conn))
            {
                cmd.Parameters.AddWithValue("@PayerName", payerName);
                var result = cmd.ExecuteScalar();
                if (result != DBNull.Value && result != null)
                    latestProcessedAt = (DateTime)result;
            }

            if (latestProcessedAt == null)
                return "<p>No files processed for today.</p>";

            // Get all log records for that latest ProcessedAt timestamp
            string logQuery = @"
                SELECT FileName, ActionType, FileSize, Status, LogMessage 
                FROM MoveIt.FileTransferLog
                WHERE MappingID = (SELECT MappingID FROM MoveIt.EmailAddresses WHERE PayerName = @PayerName)
                  AND ProcessedAt = @ProcessedAt
                ORDER BY FileName";

            using (var cmd = new SqlCommand(logQuery, conn))
            {
                cmd.Parameters.AddWithValue("@PayerName", payerName);
                cmd.Parameters.AddWithValue("@ProcessedAt", latestProcessedAt.Value);

                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        entries.Add(new FileLogEntry
                        {
                            FileName = reader["FileName"].ToString(),
                            Action = reader["ActionType"].ToString(),
                            FileSize = Convert.ToInt64(reader["FileSize"]),
                            Status = reader["Status"].ToString()
                        });
                    }
                }
            }
        }

        // Generate HTML
        if (entries.Count == 0)
            return "<p>No files processed in the latest batch.</p>";

        var sb = new StringBuilder();
        sb.AppendLine("<h3>File Processing Summary</h3>");
        sb.AppendLine("<table border='1' cellpadding='5' cellspacing='0' style='border-collapse:collapse;'>");
        sb.AppendLine("<tr style='background-color:#f2f2f2;'><th>File Name</th><th>Action</th><th>Size (bytes)</th><th>Status</th></tr>");

        foreach (var entry in entries)
        {
            sb.AppendLine($"<tr><td>{entry.FileName}</td><td>{entry.Action}</td><td>{entry.FileSize}</td><td>{entry.Status}</td></tr>");
        }

        sb.AppendLine("</table>");
        return sb.ToString();
    }

    public class FileLogEntry
    {
        public string FileName { get; set; }
        public string Action { get; set; }
        public long FileSize { get; set; }
        public string Status { get; set; }
    }
}


public void Main()
{
    ConnectionManager smtpConnection = Dts.Connections["CM_SMTP_EXHUB"];
    string smtpServer = smtpConnection.Properties["SmtpServer"].GetValue(smtpConnection).ToString();

    try
    {
        // Load config from SSIS variables
        var config = Config.LoadFromVariables(Dts.Variables);

        // Reset EmailSent to false at start of package run if needed
        if (!Dts.Variables.Contains("User::EmailSent"))
        {
            Dts.Variables.Add("User::EmailSent", false);
        }

        // Execute file processing
        var summary = new EmailSummary();
        var processor = new FileProcessor(config, new Logger(Dts.Variables), Dts.Variables, summary);
        processor.Execute();

        // Check if email already sent
        bool emailSent = (bool)Dts.Variables["User::EmailSent"].Value;
        if (!emailSent)
        {
            // Generate HTML summary from FileTransferLog
            string htmlBody = GetLogSummary.GenerateHtmlSummary(config.PayerName, Dts.Variables);

            if (!string.IsNullOrWhiteSpace(htmlBody))
            {
                var emailer = new Emailer(Dts.Variables);
                emailer.SendEmail(smtpServer, $"File Processing Summary - {config.PayerName}", htmlBody, config.PayerName);

                // Mark as sent to prevent duplicate emails
                Dts.Variables["User::EmailSent"].Value = true;
            }
        }

        Dts.TaskResult = (int)ScriptResults.Success;
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error in Main(): {ex.Message}");
        new Logger(Dts.Variables).LogError("Main", ex.Message);
        Dts.TaskResult = (int)ScriptResults.Failure;
    }
}
