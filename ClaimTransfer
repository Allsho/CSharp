public void Main()
{
    try
    {
        var config = Config.LoadFromVariables(Dts.Variables);
        var summary = new EmailSummary();
        var processor = new FileProcessor(config, new Logger(Dts.Variables), Dts.Variables, summary);
        processor.Execute();

        // Send summary email
        var emailer = new Emailer(Dts.Variables);
        string htmlBody = summary.GenerateHtml();
        emailer.SendEmail(Dts.Connections["CM_SMTP_EXHUB"], "File Processing Summary", htmlBody, config.PayerName);

        Dts.TaskResult = (int)ScriptResults.Success;
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error in Main(): {ex.Message}");
        new Logger(Dts.Variables).LogError("Main", ex.Message);
        Dts.TaskResult = (int)ScriptResults.Failure;
    }
}

public class Emailer
{
    private readonly Variables _vars;

    public Emailer(Variables vars)
    {
        _vars = vars;
    }

    public void SendEmail(ConnectionManager smtpConnection, string subject, string htmlBody, string payerName)
    {
        try
        {
            // Fetch From and Recipients from MoveIt.EmailAddresses
            var emailAddresses = GetEmailAddressesFromDb(payerName);

            if (string.IsNullOrWhiteSpace(emailAddresses.From) || string.IsNullOrWhiteSpace(emailAddresses.Recipients))
            {
                Console.WriteLine("From or Recipients missing. Email not sent.");
                return;
            }

            using (var message = new MailMessage())
            {
                message.From = new MailAddress(emailAddresses.From);

                // Add multiple recipients (comma-separated)
                foreach (var recipient in emailAddresses.Recipients.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                {
                    message.To.Add(recipient.Trim());
                }

                message.Subject = subject;
                message.Body = htmlBody;
                message.IsBodyHtml = true;

                using (var client = new SmtpClient())
                {
                    client.Send(message);
                }
            }

            Console.WriteLine($"Email sent from: {emailAddresses.From} to: {emailAddresses.Recipients}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Email sending failed: {ex.Message}");
        }
    }

    private (string From, string Recipients) GetEmailAddressesFromDb(string payerName)
    {
        var connStr = _vars["User::CM_OLEDB_ClaimsStage"].Value.ToString();

        using (var conn = new SqlConnection(connStr))
        {
            conn.Open();
            string query = @"SELECT [From], Recipients 
                             FROM MoveIt.EmailAddresses 
                             WHERE PayerName = @PayerName";

            using (var cmd = new SqlCommand(query, conn))
            {
                cmd.Parameters.AddWithValue("@PayerName", payerName);
                using (var reader = cmd.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        return (
                            From: reader["From"]?.ToString() ?? string.Empty,
                            Recipients: reader["Recipients"]?.ToString() ?? string.Empty
                        );
                    }
                }
            }
        }

        return (From: string.Empty, Recipients: string.Empty);
    }
}
