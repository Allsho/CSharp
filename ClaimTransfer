using System;
using System.Data.SqlClient;
using System.Net;
using System.Net.Mail;
using System.Text;
using Microsoft.SqlServer.Dts.Runtime;

namespace FileETL
{
    public class Emailer
    {
        private readonly ConnectionManager _smtpConn;
        private readonly string _logConnStr;

        public Emailer(ConnectionManager smtpConn, string logConnStr)
        {
            _smtpConn = smtpConn ?? throw new ArgumentNullException(nameof(smtpConn));
            _logConnStr = logConnStr ?? throw new ArgumentNullException(nameof(logConnStr));
        }

        public void SendEmail(string subject, string body, string to, string from = null)
        {
            try
            {
                var smtpConfig = (SmtpClientConnection)_smtpConn.InnerObject;

                using (SmtpClient smtp = new SmtpClient(smtpConfig.ServerName, smtpConfig.Port))
                {
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;

                    if (smtpConfig.UseWindowsAuthentication)
                        smtp.UseDefaultCredentials = true;
                    else if (!string.IsNullOrEmpty(smtpConfig.UserName))
                        smtp.Credentials = new NetworkCredential(smtpConfig.UserName, smtpConfig.Password);

                    MailMessage msg = new MailMessage
                    {
                        Subject = subject,
                        Body = body,
                        From = new MailAddress(from ?? smtpConfig.SenderEmail),
                        IsBodyHtml = false
                    };
                    msg.To.Add(to);
                    smtp.Send(msg);
                }
            }
            catch (Exception ex)
            {
                throw new ApplicationException($"Email send failed: {ex.Message}", ex);
            }
        }

        public void SendSuccessSummary(string payerName, int mappingID, string to)
        {
            string body = $"The ETL job completed successfully for payer: {payerName}\n\nFiles processed:\n";

            using (var conn = new SqlConnection(_logConnStr))
            {
                conn.Open();
                string query = @"SELECT FileName, FileSize, Status 
                                 FROM MoveIt.FileTransferLog 
                                 WHERE MappingID = @MappingID 
                                   AND CAST(ProcessedAt AS DATE) = CAST(GETDATE() AS DATE)
                                 ORDER BY FileName";

                using (var cmd = new SqlCommand(query, conn))
                {
                    cmd.Parameters.AddWithValue("@MappingID", mappingID);

                    using (var reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string file = reader.GetString(0);
                            long size = reader.GetInt64(1);
                            string status = reader.GetString(2);

                            body += $"- {file} ({size / 1024} KB) â†’ {status}\n";
                        }
                    }
                }
            }

            SendEmail($"ETL Success - {payerName}", body, to);
        }

        public void SendFailure(string payerName, string error, string to)
        {
            SendEmail(
                $"ETL Failure - {payerName}",
                $"The ETL job failed for payer: {payerName}\n\nError: {error}",
                to
            );
        }
    }
}


try
{
    var config = Config.LoadFromVariables(Dts.Variables);
    var logger = new Logger(Dts.Variables);

    var processor = new FileProcessor(config, logger, Dts.Variables);
    processor.Execute();

    // Send email summary with file names & sizes
    var emailer = new Emailer(Dts.Connections["CM_SMTP"], Dts.Variables["User::CM_OLEDB_ClaimsStage"].Value.ToString());
    emailer.SendSuccessSummary(config.PayerName, config.MappingID, "team@yourdomain.com");

    Dts.TaskResult = (int)ScriptResults.Success;
}
catch (Exception ex)
{
    Console.WriteLine($"Error in Main(): {ex.Message}");
    new Logger(Dts.Variables).LogError("Main", ex.Message);

    var config = Config.LoadFromVariables(Dts.Variables);
    var emailer = new Emailer(Dts.Connections["CM_SMTP"], Dts.Variables["User::CM_OLEDB_ClaimsStage"].Value.ToString());
    emailer.SendFailure(config.PayerName, ex.Message, "team@yourdomain.com");

    Dts.TaskResult = (int)ScriptResults.Failure;
}
