// GetLogSummary.cs
using System;
using System.Data.SqlClient;
using System.Text;
using Microsoft.SqlServer.Dts.Runtime;

public class GetLogSummary
{
    private readonly Variables _vars;

    public GetLogSummary(Variables vars)
    {
        _vars = vars;
    }

    public string GenerateHtml(int mappingId)
    {
        var connStr = _vars["User::CM_OLEDB_ClaimsStage"].Value.ToString();

        var sb = new StringBuilder();
        sb.AppendLine("<h3>File Processing Summary</h3>");

        try
        {
            using (var conn = new SqlConnection(connStr))
            {
                conn.Open();

                // Fetch all logs for this mapping ID
                string query = @"SELECT FileName, ActionType, FileSize, Status, LogMessage, ProcessedAt
                                 FROM MoveIt.FileTransferLog
                                 WHERE MappingID = @MappingID
                                 ORDER BY ProcessedAt ASC";

                using (var cmd = new SqlCommand(query, conn))
                {
                    cmd.Parameters.AddWithValue("@MappingID", mappingId);

                    using (var reader = cmd.ExecuteReader())
                    {
                        if (!reader.HasRows)
                        {
                            sb.AppendLine("<p>No files were processed.</p>");
                            return sb.ToString();
                        }

                        // Table header
                        sb.AppendLine("<table border='1' cellpadding='5' cellspacing='0' style='border-collapse:collapse; width:100%; font-family:Arial, sans-serif;'>");
                        sb.AppendLine("<tr style='background-color:#4CAF50; color:white;'><th>File Name</th><th>Action</th><th>Size (bytes)</th><th>Status</th><th>Message</th><th>Processed At</th></tr>");

                        bool alternate = false;

                        while (reader.Read())
                        {
                            string bgColor = alternate ? "#f9f9f9" : "#ffffff";
                            alternate = !alternate;

                            sb.AppendLine($"<tr style='background-color:{bgColor};'>");
                            sb.AppendLine($"<td>{reader["FileName"]}</td>");
                            sb.AppendLine($"<td>{reader["ActionType"]}</td>");
                            sb.AppendLine($"<td>{reader["FileSize"]}</td>");
                            sb.AppendLine($"<td>{reader["Status"]}</td>");
                            sb.AppendLine($"<td>{reader["LogMessage"]}</td>");
                            sb.AppendLine($"<td>{Convert.ToDateTime(reader["ProcessedAt"]).ToString("yyyy-MM-dd HH:mm:ss")}</td>");
                            sb.AppendLine("</tr>");
                        }

                        sb.AppendLine("</table>");

                        // Summary counts
                        sb.AppendLine("<br/>");
                        sb.AppendLine("<h4>Summary Counts:</h4>");
                        sb.AppendLine("<ul>");

                        string countQuery = @"SELECT Status, COUNT(*) AS Count
                                              FROM MoveIt.FileTransferLog
                                              WHERE MappingID = @MappingID
                                              GROUP BY Status";

                        using (var countCmd = new SqlCommand(countQuery, conn))
                        {
                            countCmd.Parameters.AddWithValue("@MappingID", mappingId);
                            using (var countReader = countCmd.ExecuteReader())
                            {
                                while (countReader.Read())
                                {
                                    sb.AppendLine($"<li>{countReader["Status"]}: {countReader["Count"]}</li>");
                                }
                            }
                        }

                        sb.AppendLine("</ul>");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            sb.AppendLine($"<p style='color:red;'>Failed to generate log summary: {ex.Message}</p>");
        }

        return sb.ToString();
    }
}


public void Main()
{
    ConnectionManager smtpConnection = Dts.Connections["CM_SMTP_EXHUB"];
    string smtpServer = smtpConnection.Properties["SmtpServer"].GetValue(smtpConnection).ToString();

    try
    {
        var config = Config.LoadFromVariables(Dts.Variables);

        // Process files
        var processor = new FileProcessor(config, new Logger(Dts.Variables), Dts.Variables);
        processor.Execute();

        // Generate summary email from log table
        var summary = GetLogSummary(config.MappingID);
        string htmlBody = summary.GenerateHtml();

        // Send summary email
        var emailer = new Emailer(Dts.Variables);
        emailer.SendEmail(smtpServer, "File Processing Summary", htmlBody, config.PayerName);

        Dts.TaskResult = (int)ScriptResults.Success;
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error in Main(): {ex.Message}");
        new Logger(Dts.Variables).LogError("Main", ex.Message);
        Dts.TaskResult = (int)ScriptResults.Failure;
    }
}
