public void Main()
{
	// Variables passed from SSIS
    string mappingID = Dts.Variables["User::MappingID"].Value.ToString();
    string actionType = Dts.Variables["User::ActionType"].Value.ToString();
    string sourceFolder = Dts.Variables["User::SourceFolder"].Value.ToString();
    string destinationFolder = Dts.Variables["User::DestinationFolder"].Value.ToString();
    string filePattern = Dts.Variables["User::FilePattern"].Value.ToString();
    string exclusionList = Dts.Variables["User::ExclusionList"].Value.ToString();
    string zipName = Dts.Variables["User::ZipName"].Value.ToString();

    // Grouping logic
    string payerName = Dts.Variables["User::PayerName"].Value.ToString();
    int sequence = Convert.ToInt32(Dts.Variables["User::Sequence"].Value);

    // Static vairables
    string currentPayer = Dts.Variables["User::CurrentPayer"].Value.ToString();
    bool hasFiles = (bool)Dts.Variables["User::HasFiles"].Value;

    try
    {
        if (sequence == 1)
        {
            string[] matchingFiles = Directory.GetFiles(sourceFolder, filePattern)
                .Where(file => File.GetLastWriteTime(file).Year == DateTime.Now.Year &&
                              File.GetLastWriteTime(file).Month == DateTime.Now.Month)
                .ToArray();
            if (matchingFiles.Length == 0)
            {
                Console.WriteLine($"No files found in SourceFolder ' {sourceFolder}' for pattern '{filePattern}'. Skipping payer step.");
                LogOperation("No Files Found", "Success", $"Skipped - No files found for {payerName}.");
                Dts.TaskResult = (int)ScriptResults.Success;
                return;
            }
            hasFiles = true;
            Dts.Variables["User::HasFiles"].Value = true;
            Dts.Variables["User::CurrentPayer"].Value = payerName;
        }
        else if (payerName != currentPayer || !hasFiles)
        {
            LogOperation("No Files Found", "Success", "Skipped - Seq1 had no files.");
            Dts.TaskResult = (int)ScriptResults.Success;
            return;
        }

        // Perform action based on ActionType
        switch (actionType)
        {
            case "Move":
                MoveFiles(sourceFolder, destinationFolder, filePattern, exclusionList);
                break;

            case "Copy":
                CopyFiles(sourceFolder, destinationFolder, filePattern, exclusionList);
                break;

            case "Zip":
                ZipFiles(sourceFolder, destinationFolder, filePattern, exclusionList, zipName);
                break;

            default:
                throw new Exception("Unknown ActionType: " + actionType);
        }

        Dts.TaskResult = (int)ScriptResults.Success;
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error in Main(): {ex.Message}");
        LogOperation("Error in Main()", "Failure", ex.Message);
        Dts.TaskResult = (int)ScriptResults.Failure;
    }
}

// Move Files with Exclusion logic
private void MoveFiles(string sourceFolder, string destinationFolder, string filePattern, string exclusionList)
{
    ProcessFiles(sourceFolder, destinationFolder, filePattern, exclusionList, true);
}

// Copy Files with Exclusion Logic
private void CopyFiles(string sourceFolder, string destinationFolder, string filePattern, string exclusionList)
{
    ProcessFiles(sourceFolder, destinationFolder, filePattern, exclusionList, false);
}

// Zip Files and Move to Outbound
private void ZipFiles(string sourceFolder, string destinationFolder, string filePattern, string exclusionList, string zipName)
{
    try
    {
        if (!Directory.Exists(sourceFolder))
            throw new DirectoryNotFoundException($"Source folder not found: {sourceFolder}");

        if (!Directory.Exists(destinationFolder))
            throw new DirectoryNotFoundException($"Destination folder not found: {destinationFolder}");
            //Directory.CreateDirectory(destinationFolder);

        // Convert exclusion list into an array
        string[] exclusions = exclusionList.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

        // Get all files from source folder
        string[] files = Directory.GetFiles(sourceFolder, filePattern);

        // Generate zip file name based on timestamp
        string zipFileName = Path.Combine(destinationFolder, $"{zipName}_{DateTime.Now:yyyyMM}.zip");

        // Create and write to zip file
        using (ZipArchive archive = ZipFile.Open(zipFileName, ZipArchiveMode.Create))
        {
            foreach (string file in files)
            {
                string fileName = Path.GetFileName(file);

                // Ensure the file is directly inside the source folder
                if (!file.StartsWith(sourceFolder, StringComparison.OrdinalIgnoreCase))
                {
                    Console.WriteLine($"Skipped file outside source folder: {fileName}");
                    continue;
                }

                // Check Exclusion List using Contains
                if (Array.Exists(exclusions, ex => fileName.IndexOf(ex.Trim(), StringComparison.OrdinalIgnoreCase) >= 0))
                {
                    Console.WriteLine($"Exlcuded file: {fileName}");
                    continue;
                }

                try
                {
                    archive.CreateEntryFromFile(file, fileName);
                    Console.WriteLine($"Zipped: {fileName}");
                    LogOperation(fileName, "Success", "File compressed successfully.");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error zipping file: {fileName}. Error: {ex.Message}");
                    LogOperation(fileName, "Failure", ex.Message);
                }
            }
        }

        Console.WriteLine($"Zip file created: {zipFileName}");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error in ZipFiles(): {ex.Message}");
        LogOperation("N/A", "Failure", ex.Message);
    }
}

// Core File Processing Function
private void ProcessFiles(string sourceFolder, string destinationFolder, string filePattern, string exclusionList, bool isMove)
{
    try
    {
        if (!Directory.Exists(sourceFolder))
            throw new DirectoryNotFoundException($"Source folder not found: {sourceFolder}");

        if (!Directory.Exists(destinationFolder))
            throw new DirectoryNotFoundException($"Destination folder not found: {destinationFolder}");
            //Directory.CreateDirectory(destinationFolder);

        // Convert exclusion list into an array
        string[] exclusions = exclusionList.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

        // Get matching files
        string[] files = Directory.GetFiles(sourceFolder, filePattern);

        foreach (string file in files)
        {
            string fileName = Path.GetFileName(file);

            // Check Exclusion List
            if (Array.Exists(exclusions, ex => fileName.IndexOf(ex.Trim(), StringComparison.OrdinalIgnoreCase) >= 0))
            {
                Console.WriteLine($"Excluded file: {fileName}");
                LogOperation(fileName, "Excluded", "File excluded based on exclusion list.");
                continue;
            }

            string destinationFile = Path.Combine(destinationFolder, fileName);

            try
            {
                if (isMove)
                {
                    File.Move(file, destinationFile);
                    Console.WriteLine($"Moved: {fileName}");
                    LogOperation(fileName, "Success", "File moved successfully.");
                }
                else
                {
                    File.Copy(file, destinationFile, true);
                    Console.WriteLine($"Copied: {fileName}");
                    LogOperation(fileName, "Success", "File moved successfully.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error processing file: {fileName}. Error: {ex.Message}");
                LogOperation(fileName, "Failure", ex.Message);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error in ProcessFiles(): {ex.Message}");
        LogOperation("N.A", "Failure", ex.Message);
    }
}

private void LogOperation(string fileName, string status, string logMessage)
{
    try
    {
        int mappingID = Convert.ToInt32(Dts.Variables["User::MappingID"].Value);
        string actionType = Dts.Variables["User::ActionType"].Value.ToString();

        Dts.Variables["User::LogMappingID"].Value = mappingID;
        Dts.Variables["User::LogActionType"].Value = actionType;
        Dts.Variables["User::LogFileName"].Value = fileName;
        Dts.Variables["User::LogStatus"].Value = status;
        Dts.Variables["User::LogMessage"].Value = logMessage;

        Console.WriteLine($"Log Captured - MappingID: {mappingID}, FileName: {fileName}, Status: {status}, Message: {logMessage}");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error while logging: {ex.Message}");
    }
}


public void Main()
{
    try
    {
        // Load variables
        var config = LoadVariables();

        // Sequence 1: Check for files
        if (config.Sequence == 1)
        {
            var matchingFiles = GetFilesByPatternAndDate(config.SourceFolder, config.FilePattern, DateTime.Now);

            if (!matchingFiles.Any())
            {
                Console.WriteLine($"No files found in SourceFolder '{config.SourceFolder}' for pattern '{config.FilePattern}'. Skipping payer step.");
                LogOperation(config, "No Files Found", "Success", $"Skipped - No files found for {config.PayerName}.");
                Dts.TaskResult = (int)ScriptResults.Success;
                return;
            }

            config.HasFiles = true;
            Dts.Variables["User::HasFiles"].Value = true;
            Dts.Variables["User::CurrentPayer"].Value = config.PayerName;
        }
        else if (config.PayerName != config.CurrentPayer || !config.HasFiles)
        {
            LogOperation(config, "No Files Found", "Success", "Skipped - Seq1 had no files.");
            Dts.TaskResult = (int)ScriptResults.Success;
            return;
        }

        // Perform the action
        switch (config.ActionType)
        {
            case "Move":
                ProcessFiles(config, true);
                break;
            case "Copy":
                ProcessFiles(config, false);
                break;
            case "Zip":
                ZipFiles(config);
                break;
            default:
                throw new Exception($"Unknown ActionType: {config.ActionType}");
        }

        Dts.TaskResult = (int)ScriptResults.Success;
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error in Main(): {ex.Message}");
        LogOperation(null, "Error in Main()", "Failure", ex.Message);
        Dts.TaskResult = (int)ScriptResults.Failure;
    }
}

// ============================= HELPERS =============================

private (string[] Files, string[] Exclusions) GetMatchingFiles(string folder, string pattern, string exclusionList)
{
    string[] exclusions = exclusionList.Split(',', StringSplitOptions.RemoveEmptyEntries);
    var files = Directory.GetFiles(folder, pattern)
        .Where(file => !exclusions.Any(ex => Path.GetFileName(file).IndexOf(ex.Trim(), StringComparison.OrdinalIgnoreCase) >= 0))
        .ToArray();

    return (files, exclusions);
}

private string[] GetFilesByPatternAndDate(string folder, string pattern, DateTime filterDate)
{
    return Directory.GetFiles(folder, pattern)
        .Where(file => File.GetLastWriteTime(file).Year == filterDate.Year &&
                       File.GetLastWriteTime(file).Month == filterDate.Month)
        .ToArray();
}

private void ProcessFiles(Config config, bool isMove)
{
    try
    {
        ValidateDirectories(config.SourceFolder, config.DestinationFolder);

        var (files, _) = GetMatchingFiles(config.SourceFolder, config.FilePattern, config.ExclusionList);

        foreach (var file in files)
        {
            string fileName = Path.GetFileName(file);
            string destination = Path.Combine(config.DestinationFolder, fileName);

            try
            {
                if (isMove)
                    File.Move(file, destination);
                else
                    File.Copy(file, destination, true);

                Console.WriteLine($"{(isMove ? "Moved" : "Copied")}: {fileName}");
                LogOperation(config, fileName, "Success", $"File {(isMove ? "moved" : "copied")} successfully.");
            }
            catch (Exception ex)
            {
                LogOperation(config, fileName, "Failure", ex.Message);
            }
        }
    }
    catch (Exception ex)
    {
        LogOperation(config, "N/A", "Failure", $"Error in ProcessFiles: {ex.Message}");
    }
}

private void ZipFiles(Config config)
{
    try
    {
        ValidateDirectories(config.SourceFolder, config.DestinationFolder);

        var (files, exclusions) = GetMatchingFiles(config.SourceFolder, config.FilePattern, config.ExclusionList);

        string zipPath = Path.Combine(config.DestinationFolder, $"{config.ZipName}_{DateTime.Now:yyyyMM}.zip");

        using (var archive = ZipFile.Open(zipPath, ZipArchiveMode.Create))
        {
            foreach (var file in files)
            {
                string fileName = Path.GetFileName(file);
                try
                {
                    archive.CreateEntryFromFile(file, fileName);
                    LogOperation(config, fileName, "Success", "File compressed successfully.");
                }
                catch (Exception ex)
                {
                    LogOperation(config, fileName, "Failure", $"Error zipping file: {ex.Message}");
                }
            }
        }

        Console.WriteLine($"Zip file created: {zipPath}");
    }
    catch (Exception ex)
    {
        LogOperation(config, "N/A", "Failure", $"Error in ZipFiles: {ex.Message}");
    }
}

private void ValidateDirectories(params string[] folders)
{
    foreach (string folder in folders)
    {
        if (!Directory.Exists(folder))
            throw new DirectoryNotFoundException($"Folder not found: {folder}");
    }
}

private Config LoadVariables()
{
    return new Config
    {
        MappingID = Convert.ToInt32(Dts.Variables["User::MappingID"].Value),
        ActionType = Dts.Variables["User::ActionType"].Value.ToString(),
        SourceFolder = Dts.Variables["User::SourceFolder"].Value.ToString(),
        DestinationFolder = Dts.Variables["User::DestinationFolder"].Value.ToString(),
        FilePattern = Dts.Variables["User::FilePattern"].Value.ToString(),
        ExclusionList = Dts.Variables["User::ExclusionList"].Value.ToString(),
        ZipName = Dts.Variables["User::ZipName"].Value.ToString(),
        PayerName = Dts.Variables["User::PayerName"].Value.ToString(),
        Sequence = Convert.ToInt32(Dts.Variables["User::Sequence"].Value),
        CurrentPayer = Dts.Variables["User::CurrentPayer"].Value.ToString(),
        HasFiles = (bool)Dts.Variables["User::HasFiles"].Value
    };
}

private void LogOperation(Config config, string fileName, string status, string message)
{
    try
    {
        if (config != null)
        {
            Dts.Variables["User::LogMappingID"].Value = config.MappingID;
            Dts.Variables["User::LogActionType"].Value = config.ActionType;
        }

        Dts.Variables["User::LogFileName"].Value = fileName;
        Dts.Variables["User::LogStatus"].Value = status;
        Dts.Variables["User::LogMessage"].Value = message;

        Console.WriteLine($"Log: [{status}] {fileName} - {message}");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Logging failed: {ex.Message}");
    }
}

// ============================= CLASS =============================

class Config
{
    public int MappingID;
    public string ActionType;
    public string SourceFolder;
    public string DestinationFolder;
    public string FilePattern;
    public string ExclusionList;
    public string ZipName;
    public string PayerName;
    public int Sequence;
    public string CurrentPayer;
    public bool HasFiles;
}

