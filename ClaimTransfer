CREATE TABLE MoveIt.EmailAddresses
(
    PayerName NVARCHAR(100),
    Sender NVARCHAR(100),
    Recipient NVARCHAR(500),
    CC NVARCHAR(500) NULL
);

public void SendEmail(ConnectionManager smtpConnection, string subject, string htmlBody, string payerName)
{
    try
    {
        // Keep 'from' from the SMTP connection manager (environmental variable)
        string from = smtpConnection.Properties["From"].GetValue(smtpConnection).ToString();

        // Get recipients and CC from SQL table
        var addresses = GetEmailAddressesFromDb(payerName);

        using (var message = new MailMessage(from, addresses.Recipient))
        {
            message.Subject = subject;
            message.Body = htmlBody;
            message.IsBodyHtml = true;
            if (!string.IsNullOrWhiteSpace(addresses.CC))
                message.CC.Add(addresses.CC);

            using (var client = new SmtpClient())
            {
                client.Send(message);
            }
        }

        // Optional: store email info in DB
        SaveEmailRecordToDb(from, addresses.Recipient, addresses.CC, subject, htmlBody, payerName);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Email sending failed: {ex.Message}");
    }
}

private (string Recipient, string CC) GetEmailAddressesFromDb(string payerName)
{
    var connStr = _vars["User::CM_OLEDB_ClaimsStage"].Value.ToString();
    using (var conn = new SqlConnection(connStr))
    {
        conn.Open();
        string query = @"SELECT Recipient, CC 
                         FROM MoveIt.EmailAddresses 
                         WHERE PayerName = @PayerName";
        using (var cmd = new SqlCommand(query, conn))
        {
            cmd.Parameters.AddWithValue("@PayerName", payerName);
            using (var reader = cmd.ExecuteReader())
            {
                if (reader.Read())
                {
                    return (
                        Recipient: reader["Recipient"].ToString(),
                        CC: reader["CC"]?.ToString() ?? string.Empty
                    );
                }
            }
        }
    }
    return (Recipient: string.Empty, CC: string.Empty);
}
