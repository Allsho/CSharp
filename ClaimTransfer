//Main.cs
        public void Main()
        {
            try
            {
                var config = Config.LoadFromVariables(Dts.Variables);

                // CHANGE: pass Dts.Variables into FileProcessor
                var processor = new FileProcessor(config, new Logger(Dts.Variables), Dts.Variables);
                processor.Execute();

                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in Main(): {ex.Message}");
                new Logger(Dts.Variables).LogError("Main", ex.Message);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

//FileProcessor.cs
public class FileProcessor
{
    private readonly Config _config;
    private readonly Logger _logger;
    private readonly Variables _vars;

    public FileProcessor(Config config, Logger logger, Variables vars)
    {
        _config = config;
        _logger = logger;
        _vars = vars;
    }

    public void Execute()
    {
        var files = GetMatchingFiles();
        if (files.Length == 0)
        {
            // No files detected, do nothing and return
            return;
        }

        bool anyNewProcessed = false;
        bool allDuplicates = true;

        switch (_config.ActionType)
        {
            case "Move":
                anyNewProcessed = ProcessFiles(isMove: true, ref allDuplicates);
                break;
            case "Copy":
                anyNewProcessed = ProcessFiles(isMove: false, ref allDuplicates);
                break;
            case "Zip":
                anyNewProcessed = ZipFiles(ref allDuplicates);
                break;
            default:
                throw new Exception($"Unknown ActionType: {_config.ActionType}");
        }

        // Summary if all files were duplicates
        if (files.Length > 0 && _config.Sequence == 1 && allDuplicates)
        {
            _logger.LogInfo(_config, "AllDuplicates", "All files were duplicates and moved to archive or skipped.");
            _vars["User::HasFiles"].Value = false;
        }
    }

    public static string[] GetFilesByPatternAndDate(string folder, string pattern, DateTime date)
    {
        return Directory.GetFiles(folder, pattern)
            .Where(file => File.GetLastWriteTime(file).Year == date.Year &&
                           File.GetLastWriteTime(file).Month == date.Month)
            .ToArray();
    }

    private bool ProcessFiles(bool isMove, ref bool allDuplicates)
    {
        bool processedAnyNew = false;

        try
        {
            ValidateDirectories(_config.SourceFolder, _config.DestinationFolder);
            EnsureDirectory(_config.ArchiveFolder);

            var files = GetMatchingFiles();

            foreach (var file in files)
            {
                var fileName = Path.GetFileName(file);
                long fileSize = new FileInfo(file).Length;

                if (IsAlreadyProcessed(fileName, _config.MappingID, fileSize))
                {
                    MoveToArchiveSafely(file, fileName);
                    _logger.LogInfo(_config, fileName, $"Duplicate file {fileName} with size {fileSize} moved to archive.");
                    continue;
                }

                try
                {
                    var dest = Path.Combine(_config.DestinationFolder, fileName);
                    if (isMove)
                    {
                        if (File.Exists(dest)) File.Delete(dest);
                        File.Move(file, dest);
                    }
                    else
                    {
                        File.Copy(file, dest, true);
                    }

                    processedAnyNew = true;
                    allDuplicates = false;
                    _logger.LogSuccess(_config, fileName, isMove ? "Moved" : "Copied", fileSize);
                }
                catch (Exception ex)
                {
                    _logger.LogError(fileName, ex.Message, fileSize);
                    allDuplicates = false; // treat errors as not duplicates
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError("ProcessFiles", ex.Message);
            allDuplicates = false;
        }

        return processedAnyNew;
    }

    private bool ZipFiles(ref bool allDuplicates)
    {
        bool zippedAnything = false;

        try
        {
            ValidateDirectories(_config.SourceFolder, _config.DestinationFolder);
            EnsureDirectory(_config.ArchiveFolder);

            var files = GetMatchingFiles();

            var toZip = files.Where(f => !IsAlreadyProcessed(Path.GetFileName(f), _config.MappingID, new FileInfo(f).Length)).ToArray();
            var duplicates = files.Except(toZip).ToArray();

            // Archive duplicates
            foreach (var dup in duplicates)
            {
                MoveToArchiveSafely(dup, Path.GetFileName(dup));
                _logger.LogInfo(_config, Path.GetFileName(dup), $"Duplicate file moved to archive.");
            }

            if (toZip.Length == 0)
            {
                allDuplicates = true;
                return false; // no new files to zip
            }

            var zipPath = Path.Combine(_config.DestinationFolder, $"{_config.ZipName}_{DateTime.Now:yyyyMM}.zip");

            using (var zipToOpen = new FileStream(zipPath, FileMode.OpenOrCreate))
            using (var archive = new ZipArchive(zipToOpen, ZipArchiveMode.Update))
            {
                foreach (var file in toZip)
                {
                    var fileName = Path.GetFileName(file);

                    if (!archive.Entries.Any(e => string.Equals(e.Name, fileName, StringComparison.OrdinalIgnoreCase)))
                    {
                        archive.CreateEntryFromFile(file, fileName);
                        zippedAnything = true;
                        allDuplicates = false;
                        _logger.LogSuccess(_config, fileName, "Appended to Zip", new FileInfo(file).Length);
                    }
                    else
                    {
                        _logger.LogInfo(_config, fileName, "Skipped (already in zip).");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError("ZipFiles", ex.Message);
            allDuplicates = false;
        }

        return zippedAnything;
    }

    private void MoveToArchiveSafely(string sourcePath, string fileName)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(_config.ArchiveFolder))
            {
                _logger.LogError("ArchiveFolder", "ArchiveFolder is empty; cannot move duplicate to archive.");
                return;
            }

            // Get file last write time for folder naming
            var fileDate = File.GetLastWriteTime(sourcePath);
            var monthFolder = Path.Combine(_config.ArchiveFolder, fileDate.ToString("yyyyMM"));

            EnsureDirectory(monthFolder);

            var dest = Path.Combine(monthFolder, fileName);

            if (File.Exists(sourcePath))
            {
                if (File.Exists(dest)) File.Delete(dest);
                File.Move(sourcePath, dest);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError($"Archive:{fileName}", ex.Message);
        }
    }

    private string[] GetMatchingFiles()
    {
        var exclusions = _config.ExclusionList.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
        return Directory.GetFiles(_config.SourceFolder, _config.FilePattern)
            .Where(file =>
            {
                var name = Path.GetFileName(file);
                return !exclusions.Any(ex => name.IndexOf(ex.Trim(), StringComparison.OrdinalIgnoreCase) >= 0);
            })
            .ToArray();
    }

    private bool IsAlreadyProcessed(string fileName, int mappingID, long fileSize)
    {
        var connStr = _vars["User::CM_OLEDB_ClaimsStage"].Value.ToString();

        using (var conn = new SqlConnection(connStr))
        {
            conn.Open();
            string query = @"SELECT COUNT(*) FROM MoveIt.FileTransferLog 
                         WHERE FileName = @FileName 
                           AND MappingID = @MappingID 
                           AND FileSize = @FileSize
                           AND Status = 'Success'";
            using (SqlCommand cmd = new SqlCommand(query, conn))
            {
                cmd.Parameters.AddWithValue("@FileName", fileName);
                cmd.Parameters.AddWithValue("@MappingID", mappingID);
                cmd.Parameters.AddWithValue("@FileSize", fileSize);
                return (int)cmd.ExecuteScalar() > 0;
            }
        }
    }

    private void ValidateDirectories(params string[] folders)
    {
        foreach (var folder in folders)
        {
            if (!Directory.Exists(folder))
                throw new DirectoryNotFoundException($"Folder not found: {folder}");
        }
    }

    private void EnsureDirectory(string folder)
    {
        if (!string.IsNullOrWhiteSpace(folder) && !Directory.Exists(folder))
        {
            Directory.CreateDirectory(folder);
        }
    }
}

//config.cs
public class Config
{
    public int MappingID;
    public string ActionType;
    public string SourceFolder;
    public string DestinationFolder;
    public string FilePattern;
    public string ExclusionList;
    public string ZipName;
    public string PayerName;
    public int Sequence;
    public string CurrentPayer;
    public bool HasFiles;
    public string ArchiveFolder;

    public static Config LoadFromVariables(Variables vars)
    {
        return new Config
        {
            MappingID = Convert.ToInt32(vars["User::MappingID"].Value),
            ActionType = vars["User::ActionType"].Value.ToString(),
            SourceFolder = vars["User::SourceFolder"].Value.ToString(),
            DestinationFolder = vars["User::DestinationFolder"].Value.ToString(),
            FilePattern = vars["User::FilePattern"].Value.ToString(),
            ExclusionList = vars["User::ExclusionList"].Value.ToString(),
            ZipName = vars["User::ZipName"].Value.ToString(),
            PayerName = vars["User::PayerName"].Value.ToString(),
            Sequence = Convert.ToInt32(vars["User::Sequence"].Value),
            CurrentPayer = vars["User::CurrentPayer"].Value.ToString(),
            HasFiles = (bool)vars["User::HasFiles"].Value,
            ArchiveFolder = vars["User::ArchiveFolder"].Value.ToString()

            //(vars.Contains("User::ArchiveFolder") && vars["User::ArchiveFolder"].Value != null)
            //    ? vars["User::ArchiveFolder"].Value.ToString()
            //    : string.Empty
        };
    }
}

//Logger.cs
public class Logger
{
    private readonly Variables _vars;

    public Logger(Variables vars)
    {
        _vars = vars;
    }

    public void LogInfo(Config config, string fileName, string message, long fileSize = 0) =>
        LogOperation(config, fileName, "Info", message, fileSize);

    public void LogSuccess(Config config, string fileName, string action, long fileSize = 0) =>
        LogOperation(config, fileName, "Success", $"File {action} successfully.", fileSize);

    public void LogError(string context, string message, long fileSize = 0) =>
        LogOperation(null, context, "Failure", message, fileSize);

    private void LogOperation(Config config, string fileName, string status, string message, long fileSize = 0)
    {
        try
        {
            int mappingID = config?.MappingID ?? -1;
            string actionType = config?.ActionType ?? "Unknown";
            Console.WriteLine($"[LOG] MappingID: {mappingID}, File: {fileName}, Size: {fileSize}, Status: {status}, Message: {message}");
            WriteLogToDatabase(mappingID, actionType, fileName, status, message, fileSize);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logging failed: {ex.Message}");
        }
    }

    private void WriteLogToDatabase(int mappingID, string actionType, string fileName, string status, string message, long fileSize)
    {
        var connStr = _vars["User::CM_OLEDB_ClaimsStage"].Value.ToString();

        using (var conn = new SqlConnection(connStr))
        {
            conn.Open();
            string query = @"INSERT INTO MoveIt.FileTransferLog 
                        (MappingID, ActionType, FileName, FileSize, Status, LogMessage, ProcessedAt)
                        VALUES (@MappingID, @ActionType, @FileName, @FileSize, @Status, @Message, GETDATE())";
            using (SqlCommand cmd = new SqlCommand(query, conn))
            {
                cmd.Parameters.AddWithValue("@MappingID", mappingID);
                cmd.Parameters.AddWithValue("@ActionType", actionType);
                cmd.Parameters.AddWithValue("@FileName", fileName);
                cmd.Parameters.AddWithValue("@FileSize", fileSize);
                cmd.Parameters.AddWithValue("@Status", status);
                cmd.Parameters.AddWithValue("@Message", message);
                cmd.ExecuteNonQuery();
            }
        }
    }
}
