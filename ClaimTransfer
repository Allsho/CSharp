EmailSummary.cs

using System;
using System.Collections.Generic;
using System.Text;

public class EmailSummary
{
    public class FileLogEntry
    {
        public string FileName { get; set; }
        public string Action { get; set; }
        public long FileSize { get; set; }
        public string Status { get; set; }
    }

    private readonly List<FileLogEntry> _entries = new List<FileLogEntry>();

    public void AddEntry(string fileName, string action, long fileSize, string status)
    {
        _entries.Add(new FileLogEntry
        {
            FileName = fileName,
            Action = action,
            FileSize = fileSize,
            Status = status
        });
    }

    public string GenerateHtml()
    {
        if (_entries.Count == 0)
            return "<p>No files processed.</p>";

        var sb = new StringBuilder();
        sb.AppendLine("<h3>File Processing Summary</h3>");
        sb.AppendLine("<table border='1' cellpadding='5' cellspacing='0' style='border-collapse:collapse;'>");
        sb.AppendLine("<tr style='background-color:#f2f2f2;'><th>File Name</th><th>Action</th><th>Size (bytes)</th><th>Status</th></tr>");

        foreach (var entry in _entries)
        {
            sb.AppendLine($"<tr><td>{entry.FileName}</td><td>{entry.Action}</td><td>{entry.FileSize}</td><td>{entry.Status}</td></tr>");
        }

        sb.AppendLine("</table>");
        return sb.ToString();
    }
}

Emailer.cs

using System.Net.Mail;
using Microsoft.SqlServer.Dts.Runtime;

public class Emailer
{
    private readonly Variables _vars;

    public Emailer(Variables vars)
    {
        _vars = vars;
    }

    public void SendEmail(ConnectionManager smtpConnection, string subject, string htmlBody, string payerName)
    {
        try
        {
            // Get SMTP properties from SSIS Connection Manager
            string from = smtpConnection.Properties["From"].GetValue(smtpConnection).ToString();
            string to = smtpConnection.Properties["To"].GetValue(smtpConnection).ToString();
            string cc = smtpConnection.Properties["CC"].GetValue(smtpConnection)?.ToString() ?? string.Empty;

            using (var message = new MailMessage(from, to))
            {
                message.Subject = subject;
                message.Body = htmlBody;
                message.IsBodyHtml = true;
                if (!string.IsNullOrWhiteSpace(cc))
                    message.CC.Add(cc);

                using (var client = new SmtpClient())
                {
                    client.Send(message);
                }
            }

            // Optional: store email info in DB
            SaveEmailRecordToDb(from, to, cc, subject, htmlBody, payerName);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Email sending failed: {ex.Message}");
        }
    }

    private void SaveEmailRecordToDb(string from, string to, string cc, string subject, string body, string payerName)
    {
        var connStr = _vars["User::CM_OLEDB_ClaimsStage"].Value.ToString();

        using (var conn = new System.Data.SqlClient.SqlConnection(connStr))
        {
            conn.Open();
            string query = @"INSERT INTO MoveIt.EmailLog
                            (Sender, Recipients, CC, Subject, Body, PayerName, SentAt)
                            VALUES (@Sender, @Recipients, @CC, @Subject, @Body, @PayerName, GETDATE())";

            using (var cmd = new System.Data.SqlClient.SqlCommand(query, conn))
            {
                cmd.Parameters.AddWithValue("@Sender", from);
                cmd.Parameters.AddWithValue("@Recipients", to);
                cmd.Parameters.AddWithValue("@CC", cc);
                cmd.Parameters.AddWithValue("@Subject", subject);
                cmd.Parameters.AddWithValue("@Body", body);
                cmd.Parameters.AddWithValue("@PayerName", payerName);
                cmd.ExecuteNonQuery();
            }
        }
    }
}


//Main.cs

public void Main()
{
    try
    {
        var config = Config.LoadFromVariables(Dts.Variables);
        var summary = new EmailSummary();
        var processor = new FileProcessor(config, new Logger(Dts.Variables), Dts.Variables, summary);
        processor.Execute();

        // Send summary email
        var emailer = new Emailer(Dts.Variables);
        string htmlBody = summary.GenerateHtml();
        emailer.SendEmail(Dts.Connections["CM_SMTP"], "File Processing Summary", htmlBody, config.PayerName);

        Dts.TaskResult = (int)ScriptResults.Success;
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error in Main(): {ex.Message}");
        new Logger(Dts.Variables).LogError("Main", ex.Message);
        Dts.TaskResult = (int)ScriptResults.Failure;
    }
}

