public class Logger
{
    private readonly Variables _vars;
    private readonly EmailSummary _summary;

    public Logger(Variables vars, EmailSummary summary = null)
    {
        _vars = vars;
        _summary = summary;
    }

    public void LogInfo(Config config, string fileName, string message, long fileSize = 0) =>
        LogOperation(config, fileName, "Info", message, fileSize);

    public void LogSuccess(Config config, string fileName, string action, long fileSize = 0) =>
        LogOperation(config, fileName, "Success", $"File {action} successfully.", fileSize);

    public void LogError(string context, string message, long fileSize = 0) =>
        LogOperation(null, context, "Failure", message, fileSize);

    private void LogOperation(Config config, string fileName, string status, string message, long fileSize = 0)
    {
        try
        {
            int mappingID = config?.MappingID ?? -1;
            string actionType = config?.ActionType ?? "Unknown";

            // Console log
            Console.WriteLine($"[LOG] MappingID: {mappingID}, File: {fileName}, Size: {fileSize}, Status: {status}, Message: {message}");

            // Database log
            WriteLogToDatabase(mappingID, actionType, fileName, status, message, fileSize);

            // Add to email summary if available
            _summary?.AddEntry(fileName, actionType, fileSize, status);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logging failed: {ex.Message}");
        }
    }

    private void WriteLogToDatabase(int mappingID, string actionType, string fileName, string status, string message, long fileSize)
    {
        var connStr = _vars["User::CM_OLEDB_ClaimsStage"].Value.ToString();

        using (var conn = new SqlConnection(connStr))
        {
            conn.Open();
            string query = @"INSERT INTO MoveIt.FileTransferLog 
                            (MappingID, ActionType, FileName, FileSize, Status, LogMessage, ProcessedAt)
                            VALUES (@MappingID, @ActionType, @FileName, @FileSize, @Status, @Message, GETDATE())";

            using (var cmd = new SqlCommand(query, conn))
            {
                cmd.Parameters.AddWithValue("@MappingID", mappingID);
                cmd.Parameters.AddWithValue("@ActionType", actionType);
                cmd.Parameters.AddWithValue("@FileName", fileName);
                cmd.Parameters.AddWithValue("@FileSize", fileSize);
                cmd.Parameters.AddWithValue("@Status", status);
                cmd.Parameters.AddWithValue("@Message", message);
                cmd.ExecuteNonQuery();
            }
        }
    }
}


//Main.cs

public void Main()
{
    try
    {
        var config = Config.LoadFromVariables(Dts.Variables);
        var summary = new EmailSummary();

        // Pass summary to Logger
        var logger = new Logger(Dts.Variables, summary);

        var processor = new FileProcessor(config, logger, Dts.Variables);
        processor.Execute();

        // Send summary email
        var emailer = new Emailer(Dts.Variables);
        string htmlBody = summary.GenerateHtml();
        emailer.SendEmail(Dts.Connections["CM_SMTP"], "File Processing Summary", htmlBody, config.PayerName);

        Dts.TaskResult = (int)ScriptResults.Success;
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error in Main(): {ex.Message}");
        new Logger(Dts.Variables).LogError("Main", ex.Message);
        Dts.TaskResult = (int)ScriptResults.Failure;
    }
}
