--Script Main
// ============================= Program.cs =============================
public void Main()
{
    try
    {
        var config = Config.LoadFromVariables(Dts.Variables);

        if (!ShouldProcess(config))
        {
            Dts.TaskResult = (int)ScriptResults.Success;
            return;
        }

        // CHANGE: pass Dts.Variables into FileProcessor
        var processor = new FileProcessor(config, new Logger(Dts.Variables), Dts.Variables);
        processor.Execute();

        Dts.TaskResult = (int)ScriptResults.Success;
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error in Main(): {ex.Message}");
        new Logger(Dts.Variables).LogError("Main", ex.Message);
        Dts.TaskResult = (int)ScriptResults.Failure;
    }
}

private bool ShouldProcess(Config config)
{
    if (config.Sequence == 1)
    {
        var files = FileProcessor.GetFilesByPatternAndDate(config.SourceFolder, config.FilePattern, DateTime.Now);
        if (!files.Any())
        {
            new Logger(Dts.Variables).LogInfo(config, "No Files Found", $"Skipped - No files found for {config.PayerName}.");
            return false;
        }
        config.HasFiles = true;
        Dts.Variables["User::HasFiles"].Value = true;
        Dts.Variables["User::CurrentPayer"].Value = config.PayerName;
    }
    else if (config.PayerName != config.CurrentPayer || !config.HasFiles)
    {
        new Logger(Dts.Variables).LogInfo(config, "No Files Found", "Skipped - Seq1 had no files.");
        return false;
    }
    return true;
}

Config.cs (add ArchiveFolder)
// ============================= Config.cs =============================
public class Config
{
    public int MappingID;
    public string ActionType;
    public string SourceFolder;
    public string DestinationFolder;
    public string FilePattern;
    public string ExclusionList;
    public string ZipName;
    public string PayerName;
    public int Sequence;
    public string CurrentPayer;
    public bool HasFiles;

    // NEW
    public string ArchiveFolder;

    public static Config LoadFromVariables(Variables vars)
    {
        return new Config
        {
            MappingID = Convert.ToInt32(vars["User::MappingID"].Value),
            ActionType = vars["User::ActionType"].Value.ToString(),
            SourceFolder = vars["User::SourceFolder"].Value.ToString(),
            DestinationFolder = vars["User::DestinationFolder"].Value.ToString(),
            FilePattern = vars["User::FilePattern"].Value.ToString(),
            ExclusionList = vars["User::ExclusionList"].Value.ToString(),
            ZipName = vars["User::ZipName"].Value.ToString(),
            PayerName = vars["User::PayerName"].Value.ToString(),
            Sequence = Convert.ToInt32(vars["User::Sequence"].Value),
            CurrentPayer = vars["User::CurrentPayer"].Value.ToString(),
            HasFiles = (bool)vars["User::HasFiles"].Value,

            // read ArchiveFolder (empty if missing)
            ArchiveFolder = (vars.Contains("User::ArchiveFolder") && vars["User::ArchiveFolder"].Value != null)
                ? vars["User::ArchiveFolder"].Value.ToString()
                : string.Empty
        };
    }
}


FileProcessor.cs

// ============================= FileProcessor.cs =============================
using System;
using System.IO;
using System.IO.Compression;
using System.Data.SqlClient;
using System.Linq;
using Microsoft.SqlServer.Dts.Runtime;

public class FileProcessor
{
    private readonly Config _config;
    private readonly Logger _logger;
    private readonly Variables _vars;

    public FileProcessor(Config config, Logger logger, Variables vars)
    {
        _config = config;
        _logger = logger;
        _vars = vars;
    }

    public void Execute()
    {
        bool anyNewProcessed = false;

        switch (_config.ActionType)
        {
            case "Move":
                anyNewProcessed = ProcessFiles(isMove: true);
                break;
            case "Copy":
                anyNewProcessed = ProcessFiles(isMove: false);
                break;
            case "Zip":
                anyNewProcessed = ZipFiles();
                break;
            default:
                throw new Exception($"Unknown ActionType: {_config.ActionType}");
        }

        // If this is Sequence 1 and nothing new was processed (all duplicates → archived),
        // ensure later sequences skip.
        if (_config.Sequence == 1 && !anyNewProcessed)
        {
            try
            {
                _vars["User::HasFiles"].Value = false;
                _logger.LogInfo(_config, "AllDuplicates", "All files were previously processed; archived and skipping later sequences.");
            }
            catch (Exception ex)
            {
                _logger.LogError("SetHasFilesFalse", ex.Message);
            }
        }
    }

    public static string[] GetFilesByPatternAndDate(string folder, string pattern, DateTime date)
    {
        return Directory.GetFiles(folder, pattern)
            .Where(file => File.GetLastWriteTime(file).Year == date.Year &&
                           File.GetLastWriteTime(file).Month == date.Month)
            .ToArray();
    }

    private bool ProcessFiles(bool isMove)
    {
        bool processedAnyNew = false;

        try
        {
            ValidateDirectories(_config.SourceFolder, _config.DestinationFolder);
            EnsureDirectory(_config.ArchiveFolder);

            var files = GetMatchingFiles();

            foreach (var file in files)
            {
                var fileName = Path.GetFileName(file);

                // Duplicate → move to ArchiveFolder and skip normal action
                if (IsAlreadyProcessed(fileName))
                {
                    MoveToArchiveSafely(file, fileName);
                    continue;
                }

                try
                {
                    var dest = Path.Combine(_config.DestinationFolder, fileName);
                    if (isMove)
                    {
                        if (File.Exists(dest)) File.Delete(dest);
                        File.Move(file, dest);
                    }
                    else
                    {
                        File.Copy(file, dest, true);
                    }

                    processedAnyNew = true;
                    _logger.LogSuccess(_config, fileName, isMove ? "Moved" : "Copied");
                }
                catch (Exception ex)
                {
                    _logger.LogError(fileName, ex.Message);
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError("ProcessFiles", ex.Message);
        }

        return processedAnyNew;
    }

    private bool ZipFiles()
    {
        bool zippedAnything = false;

        try
        {
            ValidateDirectories(_config.SourceFolder, _config.DestinationFolder);
            EnsureDirectory(_config.ArchiveFolder);

            var files = GetMatchingFiles();

            // Split: non-duplicates to zip, duplicates to archive
            var toZip = files.Where(f => !IsAlreadyProcessed(Path.GetFileName(f))).ToArray();
            var duplicates = files.Except(toZip).ToArray();

            // Archive duplicates (so reposts get taken out of the pipe)
            foreach (var dup in duplicates)
            {
                MoveToArchiveSafely(dup, Path.GetFileName(dup));
            }

            if (toZip.Length == 0)
            {
                _logger.LogInfo(_config, "Zip", "No new files to zip (all duplicates archived).");
                return false; // do NOT create an empty zip
            }

            var zipPath = Path.Combine(_config.DestinationFolder, $"{_config.ZipName}_{DateTime.Now:yyyyMM}.zip");
            var mode = File.Exists(zipPath) ? ZipArchiveMode.Update : ZipArchiveMode.Create;

            using (var archive = ZipFile.Open(zipPath, mode))
            {
                foreach (var file in toZip)
                {
                    var fileName = Path.GetFileName(file);
                    try
                    {
                        // avoid duplicates inside the zip
                        bool entryExists = archive.Entries.Any(e => string.Equals(e.Name, fileName, StringComparison.OrdinalIgnoreCase));
                        if (!entryExists)
                        {
                            archive.CreateEntryFromFile(file, fileName);
                            zippedAnything = true;
                            _logger.LogSuccess(_config, fileName, "Compressed");
                        }
                        else
                        {
                            _logger.LogInfo(_config, fileName, "Skipped (already in zip).");
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError($"Zip:{fileName}", ex.Message);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError("ZipFiles", ex.Message);
        }

        return zippedAnything;
    }

    private void MoveToArchiveSafely(string sourcePath, string fileName)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(_config.ArchiveFolder))
            {
                _logger.LogError("ArchiveFolder", "ArchiveFolder is empty; cannot move duplicate to archive.");
                return;
            }

            EnsureDirectory(_config.ArchiveFolder);

            var dest = Path.Combine(_config.ArchiveFolder, fileName);

            if (File.Exists(sourcePath))
            {
                if (File.Exists(dest)) File.Delete(dest);
                File.Move(sourcePath, dest);
            }

            _logger.LogInfo(_config, fileName, $"Duplicate detected; moved to archive '{_config.ArchiveFolder}'.");
        }
        catch (Exception ex)
        {
            _logger.LogError($"Archive:{fileName}", ex.Message);
        }
    }

    private string[] GetMatchingFiles()
    {
        // C# 7.3-safe split + case-insensitive match using IndexOf
        var exclusions = _config.ExclusionList.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
        return Directory.GetFiles(_config.SourceFolder, _config.FilePattern)
            .Where(file =>
            {
                var name = Path.GetFileName(file);
                return !exclusions.Any(ex => name.IndexOf(ex.Trim(), StringComparison.OrdinalIgnoreCase) >= 0);
            })
            .ToArray();
    }

    private bool IsAlreadyProcessed(string fileName)
    {
        var connStr = _vars["User::CM_OLEDB_CS"].Value.ToString();

        using (var conn = new SqlConnection(connStr))
        {
            conn.Open();
            var query = @"
                SELECT COUNT(*) 
                FROM MoveIt.FileTransferLog 
                WHERE FileName = @FileName 
                  AND MappingID = @MappingID 
                  AND Status = 'Success'";

            using (var cmd = new SqlCommand(query, conn))
            {
                cmd.Parameters.AddWithValue("@FileName", fileName);
                cmd.Parameters.AddWithValue("@MappingID", _config.MappingID);
                return (int)cmd.ExecuteScalar() > 0;
            }
        }
    }

    private void ValidateDirectories(params string[] folders)
    {
        foreach (var folder in folders)
        {
            if (!Directory.Exists(folder))
                throw new DirectoryNotFoundException($"Folder not found: {folder}");
        }
    }

    private void EnsureDirectory(string folder)
    {
        if (!string.IsNullOrWhiteSpace(folder) && !Directory.Exists(folder))
        {
            Directory.CreateDirectory(folder);
        }
    }
}



Logger.cs
// ============================= Logger.cs =============================
using System;
using System.Data.SqlClient;
using Microsoft.SqlServer.Dts.Runtime;

public class Logger
{
    private readonly Variables _vars;

    public Logger(Variables vars)
    {
        _vars = vars;
    }

    public void LogInfo(Config config, string fileName, string message) =>
        Log(config, fileName, "Success", message);

    public void LogSuccess(Config config, string fileName, string action) =>
        Log(config, fileName, "Success", $"File {action} successfully.");

    public void LogError(string context, string message) =>
        Log(null, context, "Failure", message);

    private void Log(Config config, string fileName, string status, string message)
    {
        try
        {
            var mappingID = config?.MappingID ?? -1;
            var actionType = config?.ActionType ?? "Unknown";
            Console.WriteLine($"[LOG] MappingID: {mappingID}, File: {fileName}, Status: {status}, Message: {message}");
            WriteLogToDatabase(mappingID, actionType, fileName, status, message);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logging failed: {ex.Message}");
        }
    }

    private void WriteLogToDatabase(int mappingID, string actionType, string fileName, string status, string message)
    {
        var connStr = _vars["User::CM_OLEDB_ClaimsStage"].Value.ToString();

        using (var conn = new SqlConnection(connStr))
        {
            conn.Open();
            string query = @"INSERT INTO MoveIt.FileTransferLog 
                             (MappingID, ActionType, FileName, Status, LogMessage, ProcessedAt) 
                             VALUES (@MappingID, @ActionType, @FileName, @Status, @Message, GETDATE())";

            using (var cmd = new SqlCommand(query, conn))
            {
                cmd.Parameters.AddWithValue("@MappingID", mappingID);
                cmd.Parameters.AddWithValue("@ActionType", actionType);
                cmd.Parameters.AddWithValue("@FileName", fileName);
                cmd.Parameters.AddWithValue("@Status", status);
                cmd.Parameters.AddWithValue("@Message", message);
                cmd.ExecuteNonQuery();
            }
        }
    }
}

