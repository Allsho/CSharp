-- Main
// ============================= Program.cs =============================
public void Main()
{
    try
    {
        var config = Config.LoadFromVariables(Dts.Variables);

        if (!ShouldProcess(config))
        {
            Dts.TaskResult = (int)ScriptResults.Success;
            return;
        }

        var processor = new FileProcessor(config, new Logger(Dts.Variables));
        processor.Execute();

        Dts.TaskResult = (int)ScriptResults.Success;
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error in Main(): {ex.Message}");
        new Logger(Dts.Variables).LogError("Main", ex.Message);
        Dts.TaskResult = (int)ScriptResults.Failure;
    }
}

private bool ShouldProcess(Config config)
{
    if (config.Sequence == 1)
    {
        var files = FileProcessor.GetFilesByPatternAndDate(config.SourceFolder, config.FilePattern, DateTime.Now);
        if (!files.Any())
        {
            new Logger(Dts.Variables).LogInfo(config, "No Files Found", $"Skipped - No files found for {config.PayerName}.");
            return false;
        }
        config.HasFiles = true;
        Dts.Variables["User::HasFiles"].Value = true;
        Dts.Variables["User::CurrentPayer"].Value = config.PayerName;
    }
    else if (config.PayerName != config.CurrentPayer || !config.HasFiles)
    {
        new Logger(Dts.Variables).LogInfo(config, "No Files Found", "Skipped - Seq1 had no files.");
        return false;
    }
    return true;
}

Config.cs
public class Config
{
    public int MappingID;
    public string ActionType;
    public string SourceFolder;
    public string DestinationFolder;
    public string FilePattern;
    public string ExclusionList;
    public string ZipName;
    public string PayerName;
    public int Sequence;
    public string CurrentPayer;
    public bool HasFiles;

    public static Config LoadFromVariables(Variables vars)
    {
        return new Config
        {
            MappingID = Convert.ToInt32(vars["User::MappingID"].Value),
            ActionType = vars["User::ActionType"].Value.ToString(),
            SourceFolder = vars["User::SourceFolder"].Value.ToString(),
            DestinationFolder = vars["User::DestinationFolder"].Value.ToString(),
            FilePattern = vars["User::FilePattern"].Value.ToString(),
            ExclusionList = vars["User::ExclusionList"].Value.ToString(),
            ZipName = vars["User::ZipName"].Value.ToString(),
            PayerName = vars["User::PayerName"].Value.ToString(),
            Sequence = Convert.ToInt32(vars["User::Sequence"].Value),
            CurrentPayer = vars["User::CurrentPayer"].Value.ToString(),
            HasFiles = (bool)vars["User::HasFiles"].Value
        };
    }
}
FileProcessor.cs
public class FileProcessor
{
    private readonly Config _config;
    private readonly Logger _logger;

    public FileProcessor(Config config, Logger logger)
    {
        _config = config;
        _logger = logger;
    }

    public void Execute()
    {
        switch (_config.ActionType)
        {
            case "Move": ProcessFiles(true); break;
            case "Copy": ProcessFiles(false); break;
            case "Zip": ZipFiles(); break;
            default: throw new Exception($"Unknown ActionType: {_config.ActionType}");
        }
    }

    public static string[] GetFilesByPatternAndDate(string folder, string pattern, DateTime date)
    {
        return Directory.GetFiles(folder, pattern)
            .Where(file => File.GetLastWriteTime(file).Year == date.Year &&
                           File.GetLastWriteTime(file).Month == date.Month)
            .ToArray();
    }

    private void ProcessFiles(bool isMove)
    {
        try
        {
            ValidateDirectories(_config.SourceFolder, _config.DestinationFolder);
            var files = GetMatchingFiles();

            foreach (var file in files)
            {
                var fileName = Path.GetFileName(file);
                if (IsAlreadyProcessed(fileName))
                {
                    _logger.LogInfo(_config, fileName, "Already processed this month.");
                    continue;
                }

                try
                {
                    var dest = Path.Combine(_config.DestinationFolder, fileName);
                    if (isMove) File.Move(file, dest);
                    else File.Copy(file, dest, true);

                    _logger.LogSuccess(_config, fileName, isMove ? "Moved" : "Copied");
                }
                catch (Exception ex)
                {
                    _logger.LogError(fileName, ex.Message);
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError("ProcessFiles", ex.Message);
        }
    }

    private void ZipFiles()
    {
        try
        {
            ValidateDirectories(_config.SourceFolder, _config.DestinationFolder);
            var files = GetMatchingFiles();
            var zipPath = Path.Combine(_config.DestinationFolder, $"{_config.ZipName}_{DateTime.Now:yyyyMM}.zip");

            using (var archive = ZipFile.Open(zipPath, ZipArchiveMode.Create))
            {
                foreach (var file in files)
                {
                    var fileName = Path.GetFileName(file);
                    if (IsAlreadyProcessed(fileName))
                    {
                        _logger.LogInfo(_config, fileName, "Already processed this month.");
                        continue;
                    }
                    archive.CreateEntryFromFile(file, fileName);
                    _logger.LogSuccess(_config, fileName, "Compressed");
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError("ZipFiles", ex.Message);
        }
    }

    private string[] GetMatchingFiles()
    {
        var exclusions = _config.ExclusionList.Split(',', StringSplitOptions.RemoveEmptyEntries);
        return Directory.GetFiles(_config.SourceFolder, _config.FilePattern)
            .Where(file => !exclusions.Any(ex => Path.GetFileName(file).Contains(ex.Trim(), StringComparison.OrdinalIgnoreCase)))
            .ToArray();
    }

    private bool IsAlreadyProcessed(string fileName)
    {
        string connStr = Dts.Variables["User::CM_OLEDB_CS"].Value.ToString();
        using var conn = new SqlConnection(connStr);
        conn.Open();
        string query = @"SELECT COUNT(*) FROM MoveIt.FileTransferLog 
                         WHERE FileName = @FileName AND MappingID = @MappingID AND Status = 'Success'";
        using var cmd = new SqlCommand(query, conn);
        cmd.Parameters.AddWithValue("@FileName", fileName);
        cmd.Parameters.AddWithValue("@MappingID", _config.MappingID);
        return (int)cmd.ExecuteScalar() > 0;
    }

    private void ValidateDirectories(params string[] folders)
    {
        foreach (var folder in folders)
            if (!Directory.Exists(folder))
                throw new DirectoryNotFoundException($"Folder not found: {folder}");
    }
}

Logger.cs
public class Logger
{
    private readonly Variables _vars;

    public Logger(Variables vars) => _vars = vars;

    public void LogInfo(Config config, string fileName, string message) =>
        Log(config, fileName, "Success", message);

    public void LogSuccess(Config config, string fileName, string action) =>
        Log(config, fileName, "Success", $"File {action} successfully.");

    public void LogError(string context, string message) =>
        Log(null, context, "Failure", message);

    private void Log(Config config, string fileName, string status, string message)
    {
        try
        {
            var mappingID = config?.MappingID ?? -1;
            var actionType = config?.ActionType ?? "Unknown";
            Console.WriteLine($"[LOG] MappingID: {mappingID}, File: {fileName}, Status: {status}, Message: {message}");
            WriteLogToDatabase(mappingID, actionType, fileName, status, message);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logging failed: {ex.Message}");
        }
    }

    private void WriteLogToDatabase(int mappingID, string actionType, string fileName, string status, string message)
    {
        var connStr = _vars["User::CM_OLEDB_ClaimsStage"].Value.ToString();
        using var conn = new SqlConnection(connStr);
        conn.Open();
        string query = @"INSERT INTO MoveIt.FileTransferLog 
                         (MappingID, ActionType, FileName, Status, LogMessage, ProcessedAt) 
                         VALUES (@MappingID, @ActionType, @FileName, @Status, @Message, GETDATE())";
        using var cmd = new SqlCommand(query, conn);
        cmd.Parameters.AddWithValue("@MappingID", mappingID);
        cmd.Parameters.AddWithValue("@ActionType", actionType);
        cmd.Parameters.AddWithValue("@FileName", fileName);
        cmd.Parameters.AddWithValue("@Status", status);
        cmd.Parameters.AddWithValue("@Message", message);
        cmd.ExecuteNonQuery();
    }
}

