		public void Main()
		{
			// Variables passed from SSIS
            string mappingID = Dts.Variables["User::MappingID"].Value.ToString();
            string actionType = Dts.Variables["User::ActionType"].Value.ToString();
            string sourceFolder = Dts.Variables["User::SourceFolder"].Value.ToString();
            string destinationFolder = Dts.Variables["User::DestinationFolder"].Value.ToString();
            string filePattern = Dts.Variables["User::FilePattern"].Value.ToString();
            string exclusionList = Dts.Variables["User::ExclusionList"].Value.ToString();
            string zipName = Dts.Variables["User::ZipName"].Value.ToString();

            // Grouping logic
            string payerName = Dts.Variables["User::PayerName"].Value.ToString();
            int sequence = Convert.ToInt32(Dts.Variables["User::Sequence"].Value);

            // Static vairables
            string currentPayer = Dts.Variables["User::CurrentPayer"].Value.ToString();
            bool hasFiles = (bool)Dts.Variables["User::HasFiles"].Value;

            try
            {
                if (sequence == 1)
                {
                    string[] matchingFiles = Directory.GetFiles(sourceFolder, filePattern)
                        .Where(file => File.GetLastWriteTime(file).Year == DateTime.Now.Year &&
                                      File.GetLastWriteTime(file).Month == DateTime.Now.Month)
                        .ToArray();
                    if (matchingFiles.Length == 0)
                    {
                        Console.WriteLine($"No files found in SourceFolder ' {sourceFolder}' for pattern '{filePattern}'. Skipping payer step.");
                        LogOperation("No Files Found", "Success", $"Skipped - No files found for {payerName}.");
                        Dts.TaskResult = (int)ScriptResults.Success;
                        return;
                    }
                    hasFiles = true;
                    Dts.Variables["User::HasFiles"].Value = true;
                    Dts.Variables["User::CurrentPayer"].Value = payerName;
                }
                else if (payerName != currentPayer || !hasFiles)
                {
                    LogOperation("No Files Found", "Success", "Skipped - Seq1 had no files.");
                    Dts.TaskResult = (int)ScriptResults.Success;
                    return;
                }

                // Perform action based on ActionType
                switch (actionType)
                {
                    case "Move":
                        MoveFiles(sourceFolder, destinationFolder, filePattern, exclusionList);
                        break;

                    case "Copy":
                        CopyFiles(sourceFolder, destinationFolder, filePattern, exclusionList);
                        break;

                    case "Zip":
                        ZipFiles(sourceFolder, destinationFolder, filePattern, exclusionList, zipName);
                        break;

                    default:
                        throw new Exception("Unknown ActionType: " + actionType);
                }

                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in Main(): {ex.Message}");
                LogOperation("Error in Main()", "Failure", ex.Message);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
		}

        // Move Files with Exclusion logic
        private void MoveFiles(string sourceFolder, string destinationFolder, string filePattern, string exclusionList)
        {
            ProcessFiles(sourceFolder, destinationFolder, filePattern, exclusionList, true);
        }

        // Copy Files with Exclusion Logic
        private void CopyFiles(string sourceFolder, string destinationFolder, string filePattern, string exclusionList)
        {
            ProcessFiles(sourceFolder, destinationFolder, filePattern, exclusionList, false);
        }

        // Zip Files and Move to Outbound
        private void ZipFiles(string sourceFolder, string destinationFolder, string filePattern, string exclusionList, string zipName)
        {
            try
            {
                if (!Directory.Exists(sourceFolder))
                    throw new DirectoryNotFoundException($"Source folder not found: {sourceFolder}");

                if (!Directory.Exists(destinationFolder))
                    throw new DirectoryNotFoundException($"Destination folder not found: {destinationFolder}");
                    //Directory.CreateDirectory(destinationFolder);

                // Convert exclusion list into an array
                string[] exclusions = exclusionList.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

                // Get all files from source folder
                string[] files = Directory.GetFiles(sourceFolder, filePattern);

                // Generate zip file name based on timestamp
                string zipFileName = Path.Combine(destinationFolder, $"{zipName}_{DateTime.Now:yyyyMM}.zip");

                // Create and write to zip file
                using (ZipArchive archive = ZipFile.Open(zipFileName, ZipArchiveMode.Create))
                {
                    foreach (string file in files)
                    {
                        string fileName = Path.GetFileName(file);

                        // Ensure the file is directly inside the source folder
                        if (!file.StartsWith(sourceFolder, StringComparison.OrdinalIgnoreCase))
                        {
                            Console.WriteLine($"Skipped file outside source folder: {fileName}");
                            continue;
                        }

                        // Check Exclusion List using Contains
                        if (Array.Exists(exclusions, ex => fileName.IndexOf(ex.Trim(), StringComparison.OrdinalIgnoreCase) >= 0))
                        {
                            Console.WriteLine($"Exlcuded file: {fileName}");
                            continue;
                        }

                        try
                        {
                            archive.CreateEntryFromFile(file, fileName);
                            Console.WriteLine($"Zipped: {fileName}");
                            LogOperation(fileName, "Success", "File compressed successfully.");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Error zipping file: {fileName}. Error: {ex.Message}");
                            LogOperation(fileName, "Failure", ex.Message);
                        }
                    }
                }

                Console.WriteLine($"Zip file created: {zipFileName}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in ZipFiles(): {ex.Message}");
                LogOperation("N/A", "Failure", ex.Message);
            }
        }

        // Core File Processing Function
        private void ProcessFiles(string sourceFolder, string destinationFolder, string filePattern, string exclusionList, bool isMove)
        {
            try
            {
                if (!Directory.Exists(sourceFolder))
                    throw new DirectoryNotFoundException($"Source folder not found: {sourceFolder}");

                if (!Directory.Exists(destinationFolder))
                    throw new DirectoryNotFoundException($"Destination folder not found: {destinationFolder}");
                    //Directory.CreateDirectory(destinationFolder);

                // Convert exclusion list into an array
                string[] exclusions = exclusionList.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

                // Get matching files
                string[] files = Directory.GetFiles(sourceFolder, filePattern);

                foreach (string file in files)
                {
                    string fileName = Path.GetFileName(file);

                    // Check Exclusion List
                    if (Array.Exists(exclusions, ex => fileName.IndexOf(ex.Trim(), StringComparison.OrdinalIgnoreCase) >= 0))
                    {
                        Console.WriteLine($"Excluded file: {fileName}");
                        LogOperation(fileName, "Excluded", "File excluded based on exclusion list.");
                        continue;
                    }

                    string destinationFile = Path.Combine(destinationFolder, fileName);

                    try
                    {
                        if (isMove)
                        {
                            File.Move(file, destinationFile);
                            Console.WriteLine($"Moved: {fileName}");
                            LogOperation(fileName, "Success", "File moved successfully.");
                        }
                        else
                        {
                            File.Copy(file, destinationFile, true);
                            Console.WriteLine($"Copied: {fileName}");
                            LogOperation(fileName, "Success", "File moved successfully.");
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error processing file: {fileName}. Error: {ex.Message}");
                        LogOperation(fileName, "Failure", ex.Message);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in ProcessFiles(): {ex.Message}");
                LogOperation("N.A", "Failure", ex.Message);
            }
        }

        private void LogOperation(string fileName, string status, string logMessage)
        {
            try
            {
                int mappingID = Convert.ToInt32(Dts.Variables["User::MappingID"].Value);
                string actionType = Dts.Variables["User::ActionType"].Value.ToString();

                Dts.Variables["User::LogMappingID"].Value = mappingID;
                Dts.Variables["User::LogActionType"].Value = actionType;
                Dts.Variables["User::LogFileName"].Value = fileName;
                Dts.Variables["User::LogStatus"].Value = status;
                Dts.Variables["User::LogMessage"].Value = logMessage;

                Console.WriteLine($"Log Captured - MappingID: {mappingID}, FileName: {fileName}, Status: {status}, Message: {logMessage}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while logging: {ex.Message}");
            }
        }



Step 1:
CREATE TABLE FileTransferHistory (
    FileName NVARCHAR(255),
    FileHash NVARCHAR(64),
    FileSize BIGINT,
    ProcessedDate DATETIME,
    LastSeenDate DATETIME
);

 STEP 2: Add Required SSIS Variables

Add this variable:

User::ArchiveDeletePath (e.g., C:\Archive\DeleteAfter7Days\)

Add references to these assemblies (in Script Task):

System.Data

System.Security.Cryptography

System.Data.SqlClient (for DB access)


STEP 3: Add C# Utility Functions

private string ComputeFileHash(string filePath)
{
    using (var sha = SHA256.Create())
    using (var stream = File.OpenRead(filePath))
    {
        byte[] hashBytes = sha.ComputeHash(stream);
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
    }
}

🔍 Check if File Already Processed:
private bool IsFileAlreadyProcessed(string hash)
{
    string connString = Dts.Connections["YourConnectionManager"].ConnectionString;

    using (SqlConnection conn = new SqlConnection(connString))
    {
        conn.Open();
        using (SqlCommand cmd = new SqlCommand("SELECT COUNT(*) FROM FileTransferHistory WHERE FileHash = @hash", conn))
        {
            cmd.Parameters.AddWithValue("@hash", hash);
            int count = (int)cmd.ExecuteScalar();
            return count > 0;
        }
    }
}

💾 Save Hash to DB:

private void SaveFileHashToDb(string fileName, string fileHash, long fileSize)
{
    string connString = Dts.Connections["YourConnectionManager"].ConnectionString;

    using (SqlConnection conn = new SqlConnection(connString))
    {
        conn.Open();
        using (SqlCommand cmd = new SqlCommand(@"
            INSERT INTO FileTransferHistory (FileName, FileHash, FileSize, ProcessedDate, LastSeenDate)
            VALUES (@fileName, @fileHash, @fileSize, GETDATE(), GETDATE())", conn))
        {
            cmd.Parameters.AddWithValue("@fileName", fileName);
            cmd.Parameters.AddWithValue("@fileHash", fileHash);
            cmd.Parameters.AddWithValue("@fileSize", fileSize);
            cmd.ExecuteNonQuery();
        }
    }
}

🔁 STEP 4: Modify ProcessFiles and ZipFiles

string hash = ComputeFileHash(file);
if (IsFileAlreadyProcessed(hash))
{
    // Move duplicate to DeleteAfter7Days folder
    string deletePath = Path.Combine(Dts.Variables["User::ArchiveDeletePath"].Value.ToString(), fileName);
    File.Move(file, deletePath);
    Console.WriteLine($"Skipped duplicate file: {fileName}. Moved to DeleteAfter7Days.");
    LogOperation(fileName, "Skipped", "Duplicate file (hash match). Moved to delete folder.");
    continue;
}

// Save hash to DB before proceeding
FileInfo info = new FileInfo(file);
SaveFileHashToDb(fileName, hash, info.Length);

📦 In ZipFiles, do similar inside the foreach (string file...) loop:
Add before archive.CreateEntryFromFile:

string hash = ComputeFileHash(file);
if (IsFileAlreadyProcessed(hash))
{
    string deletePath = Path.Combine(Dts.Variables["User::ArchiveDeletePath"].Value.ToString(), fileName);
    File.Move(file, deletePath);
    Console.WriteLine($"Skipped duplicate (zip): {fileName}. Moved to DeleteAfter7Days.");
    LogOperation(fileName, "Skipped", "Duplicate file (hash match).");
    continue;
}

FileInfo info = new FileInfo(file);
SaveFileHashToDb(fileName, hash, info.Length);


✅ STEP 5: Final Script Additions
using System.Data.SqlClient;
using System.Security.Cryptography;
using System.IO.Compression;
using System.Diagnostics;


What Your Logging Could Look Like Now

private void LogOperation(string fileName, string status, string logMessage)
{
    try
    {
        string connString = Dts.Connections["LoggingDBConnection"].ConnectionString;

        using (SqlConnection conn = new SqlConnection(connString))
        {
            conn.Open();
            using (SqlCommand cmd = new SqlCommand(@"
                INSERT INTO YourLogTable (MappingID, ActionType, FileName, Status, LogMessage, LoggedDate)
                VALUES (@mappingID, @actionType, @fileName, @status, @logMessage, GETDATE())", conn))
            {
                cmd.Parameters.AddWithValue("@mappingID", Convert.ToInt32(Dts.Variables["User::MappingID"].Value));
                cmd.Parameters.AddWithValue("@actionType", Dts.Variables["User::ActionType"].Value.ToString());
                cmd.Parameters.AddWithValue("@fileName", fileName);
                cmd.Parameters.AddWithValue("@status", status);
                cmd.Parameters.AddWithValue("@logMessage", logMessage);
                cmd.ExecuteNonQuery();
            }
        }

        Console.WriteLine($"Log saved to DB - File: {fileName}, Status: {status}");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error while logging to DB: {ex.Message}");
    }
}

