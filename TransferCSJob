private string GetFileHash(string filePath)
{
    using (var sha256 = System.Security.Cryptography.SHA256.Create())
    using (var stream = File.OpenRead(filePath))
    {
        var hash = sha256.ComputeHash(stream);
        return BitConverter.ToString(hash).Replace("-", "").ToLowerInvariant();
    }
}



foreach (var file in files)
{
    string fileName = Path.GetFileName(file);
    string destination = Path.Combine(config.DestinationFolder, fileName);
    long fileSize = new FileInfo(file).Length;
    string fileHash = GetFileHash(file);

    // Skip if already processed (check by name + size + hash)
    if (IsAlreadyProcessed(fileName, config.MappingID, fileSize, fileHash))
    {
        Console.WriteLine($"Skipping duplicate file: {fileName}");
        LogOperation(config, fileName, "Duplicate", $"Duplicate file detected. Size={fileSize}, Hash={fileHash}", fileSize, fileHash);
        continue;
    }

    try
    {
        if (isMove) File.Move(file, destination);
        else File.Copy(file, destination, true);

        Console.WriteLine($"{(isMove ? "Moved" : "Copied")}: {fileName}");
        LogOperation(config, fileName, "Success", $"File {(isMove ? "moved" : "copied")} successfully.", fileSize, fileHash);
    }
    catch (Exception ex)
    {
        LogOperation(config, fileName, "Failure", ex.Message, fileSize, fileHash);
    }
}

private bool IsAlreadyProcessed(string fileName, int mappingID, long fileSize, string fileHash)
{
    string connStr = Dts.Variables["User::CM_OLEDB_CS"].Value.ToString();
    using (SqlConnection conn = new SqlConnection(connStr))
    {
        conn.Open();
        string query = @"SELECT COUNT(*) FROM MoveIt.FileTransferLog 
                         WHERE FileName = @FileName 
                           AND MappingID = @MappingID 
                           AND FileSize = @FileSize
                           AND FileHash = @FileHash
                           AND Status = 'Success'";
        using (SqlCommand cmd = new SqlCommand(query, conn))
        {
            cmd.Parameters.AddWithValue("@FileName", fileName);
            cmd.Parameters.AddWithValue("@MappingID", mappingID);
            cmd.Parameters.AddWithValue("@FileSize", fileSize);
            cmd.Parameters.AddWithValue("@FileHash", fileHash);
            return (int)cmd.ExecuteScalar() > 0;
        }
    }
}

private void LogOperation(Config config, string fileName, string status, string message, long fileSize = 0, string fileHash = null)
{
    try
    {
        int mappingID = config?.MappingID ?? -1;
        string actionType = config?.ActionType ?? "Unknown";
        Console.WriteLine($"[LOG] MappingID: {mappingID}, File: {fileName}, Size: {fileSize}, Hash: {fileHash}, Status: {status}, Message: {message}");
        WriteLogToDatabase(mappingID, actionType, fileName, status, message, fileSize, fileHash);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Logging failed: {ex.Message}");
    }
}

private void WriteLogToDatabase(int mappingID, string actionType, string fileName, string status, string message, long fileSize, string fileHash)
{
    string connStr = Dts.Variables["User::CM_OLEDB_ClaimsStage"].Value.ToString();
    using (SqlConnection conn = new SqlConnection(connStr))
    {
        conn.Open();
        string query = @"INSERT INTO MoveIt.FileTransferLog 
                        (MappingID, ActionType, FileName, FileSize, FileHash, Status, LogMessage, ProcessedAt)
                        VALUES (@MappingID, @ActionType, @FileName, @FileSize, @FileHash, @Status, @Message, GETDATE())";
        using (SqlCommand cmd = new SqlCommand(query, conn))
        {
            cmd.Parameters.AddWithValue("@MappingID", mappingID);
            cmd.Parameters.AddWithValue("@ActionType", actionType);
            cmd.Parameters.AddWithValue("@FileName", fileName);
            cmd.Parameters.AddWithValue("@FileSize", fileSize);
            cmd.Parameters.AddWithValue("@FileHash", (object)fileHash ?? DBNull.Value);
            cmd.Parameters.AddWithValue("@Status", status);
            cmd.Parameters.AddWithValue("@Message", message);
            cmd.ExecuteNonQuery();
        }
    }
}

