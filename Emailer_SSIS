CREATE TABLE ETL.Email_Config (
    ConfigName NVARCHAR(50) PRIMARY KEY,
    ConfigValue NVARCHAR(MAX)
);

INSERT INTO ETL.Email_Config (ConfigName, ConfigValue)
VALUES 
('SMTP_Server', 'smtp.yourdomain.com'),
('SMTP_Port', '25'),
('From_Email', 'etl-alerts@yourdomain.com'),
('To_Email', 'team@yourdomain.com'),
('SendOnSuccess', '1'),
('SendOnFailureOnly', '0'),
('EnableSSL', '0');


CREATE PROCEDURE ETL.usp_Build_Email_Summary
    @MappingId INT,
    @Subject NVARCHAR(255) OUTPUT,
    @Body NVARCHAR(MAX) OUTPUT
AS
BEGIN
    DECLARE @PayorName NVARCHAR(100) = (SELECT TOP 1 PayorName FROM ETL.Table_Mapping WHERE MappingID = @MappingId)
    DECLARE @StartTime DATETIME = (SELECT MIN(LogTimestamp) FROM ETL.Claims_Log WHERE Message LIKE '%ETL Process Started%')
    DECLARE @EndTime DATETIME = (SELECT MAX(LogTimestamp) FROM ETL.Claims_Log WHERE Message LIKE '%ETL Process Completed%')

    SET @Subject = CONCAT('ETL File Ingestion Summary for ', @PayorName, ' - ', FORMAT(GETDATE(), 'yyyy-MM-dd HH:mm'))

    DECLARE @NewColumns NVARCHAR(MAX) = ''
    SELECT @NewColumns = STRING_AGG(
        CONCAT('- Table: ', TableName, ', Column: ', ColumnName, 
               ', Suggested: ALTER TABLE ', TableName, ' ADD [', ColumnName, '] NVARCHAR(255);'),
        CHAR(13) + CHAR(10))
    FROM ETL.Claim_File_Schema_History
    WHERE ColumnMapped = 0 AND LogTimestamp >= @StartTime

    DECLARE @Truncation NVARCHAR(MAX) = ''
    SELECT @Truncation = STRING_AGG(
        CONCAT('- Table: ', TableName, ', Column: ', ColumnName, ', Max: ', MaxAllowedLength, ', Actual: ', ActualLength),
        CHAR(13) + CHAR(10))
    FROM ETL.Truncation_Log
    WHERE LogTimestamp >= @StartTime

    DECLARE @Errors NVARCHAR(MAX) = ''
    SELECT @Errors = STRING_AGG(
        CONCAT('- ', Message),
        CHAR(13) + CHAR(10))
    FROM ETL.Claims_Error_Log
    WHERE LogTimestamp >= @StartTime

    SET @Body = 
    CONCAT(
    'Hello Team,', CHAR(13)+CHAR(10), CHAR(13)+CHAR(10),
    'The ETL ingestion process for payor "', @PayorName, '" has completed.', CHAR(13)+CHAR(10),
    'Start Time: ', FORMAT(@StartTime, 'yyyy-MM-dd HH:mm:ss'), CHAR(13)+CHAR(10),
    'End Time: ', FORMAT(@EndTime, 'yyyy-MM-dd HH:mm:ss'), CHAR(13)+CHAR(10),
    CHAR(13)+CHAR(10),
    '‚ö†Ô∏è New Columns Detected:', CHAR(13)+CHAR(10),
    ISNULL(@NewColumns, 'None'), CHAR(13)+CHAR(10), CHAR(13)+CHAR(10),
    'üö´ Truncation Warnings:', CHAR(13)+CHAR(10),
    ISNULL(@Truncation, 'None'), CHAR(13)+CHAR(10), CHAR(13)+CHAR(10),
    '‚ùå Errors Logged:', CHAR(13)+CHAR(10),
    ISNULL(@Errors, 'None'), CHAR(13)+CHAR(10), CHAR(13)+CHAR(10),
    'Status: ', CASE WHEN @Errors IS NULL THEN '‚úÖ Success' ELSE '‚ö†Ô∏è Issues Detected' END, CHAR(13)+CHAR(10),
    CHAR(13)+CHAR(10),
    'Regards,', CHAR(13)+CHAR(10),
    'ETL Automation System'
    )
END


public void SendEmailFromDb(string subject, string body)
{
    string connStr = Dts.Variables["User::CM_OLEDB_ClaimsStage"].Value.ToString();
    string smtpServer = GetConfigValue(connStr, "SMTP_Server");
    string port = GetConfigValue(connStr, "SMTP_Port");
    string fromEmail = GetConfigValue(connStr, "From_Email");
    string toEmail = GetConfigValue(connStr, "To_Email");
    string enableSSL = GetConfigValue(connStr, "EnableSSL");

    MailMessage mail = new MailMessage();
    mail.From = new MailAddress(fromEmail);
    mail.To.Add(toEmail);
    mail.Subject = subject;
    mail.Body = body;

    SmtpClient smtp = new SmtpClient(smtpServer);
    smtp.Port = int.Parse(port);
    smtp.EnableSsl = enableSSL == "1";
    smtp.Send(mail);
}

public string GetConfigValue(string connStr, string configName)
{
    using (SqlConnection conn = new SqlConnection(connStr))
    using (SqlCommand cmd = new SqlCommand("SELECT ConfigValue FROM ETL.Email_Config WHERE ConfigName = @name", conn))
    {
        cmd.Parameters.AddWithValue("@name", configName);
        conn.Open();
        return (string)cmd.ExecuteScalar();
    }
}


DECLARE @subject NVARCHAR(255), @body NVARCHAR(MAX);
EXEC ETL.usp_Build_Email_Summary @MappingId = 101, @Subject = @subject OUTPUT, @Body = @body OUTPUT;
SELECT @subject AS Subject, @body AS Body;




public void Main()
{
    string connStr = Dts.Variables["User::CM_OLEDB_ClaimsStage"].Value.ToString();
    string basePath = Dts.Variables["User::prmRootPath"].Value.ToString();
    string idList = Dts.Variables["User::FilteredMappingIDs"].Value.ToString();

    try
    {
        Log(connStr, "ETL Process Started");

        List<TableMapping> mappings = GetTableMappings(connStr);

        using (SqlConnection conn = new SqlConnection(connStr))
        {
            conn.Open();
            foreach (var mapping in mappings)
            {
                List<ColumnMapping> columnMappings = GetColumnMappings(conn, mapping.TargetTable);
                ProcessFiles(conn, mapping, columnMappings, basePath);
            }
        }

        Log(connStr, "ETL Process Completed");
    }
    catch (Exception ex)
    {
        LogError(connStr, "General Error", ex.Message);
    }
    finally
    {
        // ‚úÖ Call the email function with MappingIds after ETL
        SendSummaryEmail(connStr, idList);
    }

    Dts.TaskResult = (int)ScriptResults.Success;
}


public void SendSummaryEmail(string connStr, string mappingIdList)
{
    foreach (string id in mappingIdList.Split(','))
    {
        if (int.TryParse(id.Trim(), out int mappingId))
        {
            try
            {
                string subject = string.Empty;
                string body = string.Empty;

                using (SqlConnection conn = new SqlConnection(connStr))
                using (SqlCommand cmd = new SqlCommand("ETL.usp_Build_Email_Summary", conn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@MappingId", mappingId);

                    SqlParameter subjectParam = new SqlParameter("@Subject", SqlDbType.NVarChar, 255)
                    {
                        Direction = ParameterDirection.Output
                    };
                    SqlParameter bodyParam = new SqlParameter("@Body", SqlDbType.NVarChar, -1)
                    {
                        Direction = ParameterDirection.Output
                    };

                    cmd.Parameters.Add(subjectParam);
                    cmd.Parameters.Add(bodyParam);

                    conn.Open();
                    cmd.ExecuteNonQuery();

                    subject = subjectParam.Value?.ToString();
                    body = bodyParam.Value?.ToString();
                }

                SendEmail(subject, body);
            }
            catch (Exception ex)
            {
                LogError(connStr, $"Email Error for MappingId {mappingId}", ex.Message);
            }
        }
    }
}


public void SendEmail(string subject, string body)
{
    try
    {
        using (System.Net.Mail.SmtpClient smtp = new System.Net.Mail.SmtpClient("smtp.yourdomain.com"))
        {
            smtp.Port = 587; // Or whatever your SMTP requires
            smtp.Credentials = new System.Net.NetworkCredential("username", "password");
            smtp.EnableSsl = true;

            var message = new System.Net.Mail.MailMessage();
            message.From = new System.Net.Mail.MailAddress("etl@yourdomain.com");
            message.To.Add("team@yourdomain.com"); // Add your team email list
            message.Subject = subject;
            message.Body = body;

            smtp.Send(message);
        }
    }
    catch (Exception ex)
    {
        // Log but don‚Äôt fail the package if email fails
        LogError("your_connection_string", "SMTP Send Error", ex.Message);
    }
}

