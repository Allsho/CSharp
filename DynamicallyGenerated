using System;
using System.Data;
using System.IO;
using System.Text;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using System.Reflection;
using System.Collections.Generic;

[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    private int _fileCounter;
    private int _bytesWritten;
    private StringBuilder _buffer;
    private TextWriter _tw;
    private bool _headerWritten;

    private TextWriter CurrentWriter
    {
        get
        {
            if (_tw == null)
            {
                string fileName = String.Format(this.Variables.filenameNDCCode, _fileCounter);
                string filePath = Path.Combine(this.Variables.folderOutboundArcadia, fileName);
                _tw = File.CreateText(filePath);
            }
            return _tw;
        }
    }

    public override void PreExecute()
    {
        base.PreExecute();
        _fileCounter = 1;
        _bytesWritten = 0;
        _buffer = new StringBuilder();
        _tw = null;
        _headerWritten = false;
    }

    public override void PostExecute()
    {
        base.PostExecute();
        FlushBuffer();
        if (_tw != null)
        {
            _tw.Flush();
            _tw.Close();
        }
    }

    public override void InputNDCCode_ProcessInputRow(InputNDCCodeBuffer Row)
    {
        if (!_headerWritten)
        {
            WriteHeader(Row);
            _headerWritten = true;
        }

        // Format and write the current row
        _buffer.AppendLine(FormatRow(Row));
        _bytesWritten += _buffer.Length;

        if (_bytesWritten >= this.Variables.maxFileLength)
        {
            FlushBuffer();
            _fileCounter += 1;
            _bytesWritten = 0;
            _headerWritten = false; // Reset header for new file
        }
    }

    private void WriteHeader(InputNDCCodeBuffer Row)
    {
        var headers = new List<string>();
        foreach (var prop in Row.GetType().GetProperties())
        {
            if (prop.Name.EndsWith("_IsNull")) continue;
            headers.Add(prop.Name.Replace("_IsNull", ""));
        }
        _buffer.AppendLine(string.Join(",", headers));
    }

    private string FormatRow(InputNDCCodeBuffer Row)
    {
        var values = new List<string>();
        foreach (var prop in Row.GetType().GetProperties())
        {
            if (!prop.Name.EndsWith("_IsNull"))
            {
                var value = prop.GetValue(Row)?.ToString().Replace("\"", "'") ?? "";
                values.Add($"\"{value}\"");
            }
        }
        return string.Join(",", values);
    }

    private void FlushBuffer()
    {
        this.CurrentWriter.Write(_buffer.ToString());
        _tw.Flush();
        _buffer.Clear();
    }
}
