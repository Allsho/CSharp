using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Text;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using System.Collections.Generic;

[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    private int _fileCounter;
    private int _bytesWritten;
    private StringBuilder _buffer;
    private TextWriter _tw;
    private bool _headerWritten;

    private TextWriter CurrentWriter
    {
        get
        {
            if (_tw == null)
            {
                string fileName = String.Format(this.Variables.filenameNDCCode, _fileCounter);
                string filePath = Path.Combine(this.Variables.folderOutboundArcadia, fileName);
                _tw = File.CreateText(filePath);
            }
            return _tw;
        }
    }

    public override void PreExecute()
    {
        base.PreExecute();
        _fileCounter = 1;
        _bytesWritten = 0;
        _buffer = new StringBuilder();
        _tw = null;
        _headerWritten = false;
        ExecuteStoredProc();
    }

    public override void PostExecute()
    {
        base.PostExecute();
        FlushBuffer();
        if (_tw != null)
        {
            _tw.Flush();
            _tw.Close();
        }
    }

    private void ExecuteStoredProc()
    {
        // Set up connection string and stored procedure
        string connString = this.Variables.connectionString;  // SSIS variable for connection string
        string storedProcName = this.Variables.storedProcName;  // SSIS variable for stored procedure name

        using (SqlConnection conn = new SqlConnection(connString))
        {
            using (SqlCommand cmd = new SqlCommand(storedProcName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                
                conn.Open();

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    WriteDataToFile(reader);
                }
            }
        }
    }

    private void WriteDataToFile(SqlDataReader reader)
    {
        while (reader.Read())
        {
            if (!_headerWritten)
            {
                WriteHeader(reader);
                _headerWritten = true;
            }

            _buffer.AppendLine(FormatRow(reader));
            _bytesWritten += _buffer.Length;

            if (_bytesWritten >= this.Variables.maxFileLength)
            {
                FlushBuffer();
                _fileCounter += 1;
                _bytesWritten = 0;
                _headerWritten = false;  // Reset header for new file
            }
        }
    }

    private void WriteHeader(SqlDataReader reader)
    {
        var headers = new List<string>();
        for (int i = 0; i < reader.FieldCount; i++)
        {
            headers.Add(reader.GetName(i));
        }
        _buffer.AppendLine(string.Join(",", headers));
    }

    private string FormatRow(SqlDataReader reader)
    {
        var values = new List<string>();
        for (int i = 0; i < reader.FieldCount; i++)
        {
            var value = reader.IsDBNull(i) ? "" : reader.GetValue(i).ToString().Replace("\"", "'");
            values.Add($"\"{value}\"");
        }
        return string.Join(",", values);
    }

    private void FlushBuffer()
    {
        this.CurrentWriter.Write(_buffer.ToString());
        _tw.Flush();
        _buffer.Clear();
    }
}
