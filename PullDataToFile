using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Text;
using Microsoft.SqlServer.Dts.Runtime;
using System.Collections.Generic;

public void Main()
{
    int fileCounter = 1;
    int bytesWritten = 0;
    StringBuilder buffer = new StringBuilder();
    bool headerWritten = false;

    try
    {
        // Retrieve SSIS variables
        string connectionString = Dts.Variables["User::connectionString"].Value.ToString();
        string storedProcName = Dts.Variables["User::storedProcName"].Value.ToString();
        string folderPath = Dts.Variables["User::folderOutboundArcadia"].Value.ToString();
        string fileNameTemplate = Dts.Variables["User::filenameNDCCode"].Value.ToString();
        int maxFileLength = (int)Dts.Variables["User::maxFileLength"].Value;

        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            SqlCommand cmd = new SqlCommand(storedProcName, conn)
            {
                CommandType = CommandType.StoredProcedure
            };
            conn.Open();

            using (SqlDataReader reader = cmd.ExecuteReader())
            {
                while (reader.Read())
                {
                    // Write header once at the beginning
                    if (!headerWritten)
                    {
                        WriteHeader(reader, buffer);
                        headerWritten = true;
                    }

                    // Write data rows
                    buffer.AppendLine(FormatRow(reader));
                    bytesWritten += Encoding.UTF8.GetByteCount(buffer.ToString());

                    // Check file size and flush if it exceeds max length
                    if (bytesWritten >= maxFileLength)
                    {
                        FlushBuffer(buffer, fileCounter, folderPath, fileNameTemplate);
                        fileCounter++;
                        bytesWritten = 0;
                        headerWritten = false;  // Reset header for new file
                    }
                }
            }

            // Final flush if there's remaining data in the buffer
            if (buffer.Length > 0)
            {
                FlushBuffer(buffer, fileCounter, folderPath, fileNameTemplate);
            }
        }

        Dts.TaskResult = (int)ScriptResults.Success;
    }
    catch (Exception ex)
    {
        Dts.Events.FireError(0, "Script Task", $"Error: {ex.Message}", "", 0);
        Dts.TaskResult = (int)ScriptResults.Failure;
    }
}

// Function to write header
private void WriteHeader(SqlDataReader reader, StringBuilder buffer)
{
    var headers = new List<string>();
    for (int i = 0; i < reader.FieldCount; i++)
    {
        headers.Add(reader.GetName(i));
    }
    buffer.AppendLine(string.Join(",", headers));
}

// Function to format each row
private string FormatRow(SqlDataReader reader)
{
    var values = new List<string>();
    for (int i = 0; i < reader.FieldCount; i++)
    {
        var value = reader.IsDBNull(i) ? "" : reader.GetValue(i).ToString().Replace("\"", "'");
        values.Add($"\"{value}\"");
    }
    return string.Join(",", values);
}

// Function to flush buffer to file and reset for next file
private void FlushBuffer(StringBuilder buffer, int fileCounter, string folderPath, string fileNameTemplate)
{
    string fileName = string.Format(fileNameTemplate, fileCounter);
    string filePath = Path.Combine(folderPath, fileName);

    using (TextWriter tw = File.CreateText(filePath))
    {
        tw.Write(buffer.ToString());
    }

    buffer.Clear();
}
