#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
#endregion

namespace ST_018a63d276314a01b0cebc43690ba56e
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {

            try
            {
                string packageName = Dts.Variables["System::PackageName"].Value.ToString();

                // List of Payors with their SSIS variable names
                var payors = new List<Payor>
                {
                    new Payor("CSHHPCMH", "User::SourceCSHHPCMH", "User::DestPCMH", "User::SchemaCSHHPCMH"),
                    new Payor("FHPCMH", "User::SourceFHPCMH", "User::DestPCMH", "User::SchemaFHPCMH"),
                    new Payor("NEMGPCMH", "User::SourceNEMGPCMH", "User::DestPCMH", "User::SchemaNEMGPCMH"),
                    new Payor("NEMGUHC", "User::SourceNEMGUHC", "User::DestUHC", "User::SchemaNEMGUHC"),
                    new Payor("NEMGWellcare", "User::SourceNEMGWellcare", "User::DestWellcare", "User::SchemaNEMGWellcare"),

                };

                foreach (var payor in payors)
                {
                    string sourceDirectory = Dts.Variables[payor.SourceVariable].Value.ToString();
                    string destinationDirectory = Dts.Variables[payor.DestinationVariable].Value.ToString();
                    string connectionString = Dts.Variables["User::ProjectClaimsConnection"].Value.ToString();
                    string sqlTableName = Dts.Variables["User::SQLTableName"].Value.ToString();
                    int schemaId = (int)Dts.Variables[payor.SchemaIdVariable].Value;

                    using (SqlConnection connection = new SqlConnection(connectionString))
                    {
                        connection.Open();

                        // Retrieve the list of file names from the SQL Server table
                        string query = $"SELECT FileName FROM {sqlTableName} WHERE SchemaId = @SchemaId";
                        SqlCommand command = new SqlCommand(query, connection);
                        command.Parameters.AddWithValue("@SchemaId", schemaId);
                        SqlDataReader reader = command.ExecuteReader();

                        // Create a HashSet to store the existing file names
                        var existingFiles = new HashSet<string>();

                        while (reader.Read())
                        {
                            string fileName = reader.GetString(0);
                            existingFiles.Add(fileName);
                        }

                        reader.Close();

                        // Check each file in the source directory
                        foreach (string filePath in Directory.GetFiles(sourceDirectory))
                        {
                            string fileName = Path.GetFileName(filePath);

                            try
                            {
                                // Check if the file already exists in the SQL Server table
                                if (!existingFiles.Contains(fileName))
                                {
                                    // Then copy if the file already exists in the SQL Server table
                                    string destinationPath = Path.Combine(destinationDirectory, fileName);
                                    File.Copy(filePath, destinationPath);

                                    Console.WriteLine($"File '{fileName}' copied successfully for {payor.Name}.");

                                    // Insert the new file, current datetime, and PayorId into the SQL Server table
                                    query = $"INSERT INTO {sqlTableName} (SchemaId, FileName, CopiedDate) VALUES (@SchemaId, @FileName, @InsertDateTime)";
                                    command = new SqlCommand(query, connection);
                                    command.Parameters.AddWithValue("@SchemaId", schemaId);
                                    command.Parameters.AddWithValue("@FileName", fileName);
                                    command.Parameters.AddWithValue("@InsertDateTime", DateTime.Now);
                                    command.ExecuteNonQuery();

                                    Console.WriteLine($"File '{fileName}' inserted into the SQL Server table with datetime and PayorId for {payor.Name}.");

                                }
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine($"An error occured: {ex.Message}");
                                // Log the error in the ETL.Claims_ErrorLog table
                                LogError(connection, packageName, ex.Message);
                                Dts.TaskResult = (int)ScriptResults.Failure;
                            }

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occured: {ex.Message}");
                Dts.TaskResult = (int)ScriptResults.Failure;
            }

        }

        private class Payor
        {
            public string Name { get; }

            public string SourceVariable { get; }

            public string DestinationVariable { get; }

            public string SchemaIdVariable { get; }

            public Payor(string name, string sourceVariable, string destinationVariable, string schemaIdVariable)
            {
                Name = name;
                SourceVariable = sourceVariable;
                DestinationVariable = destinationVariable;
                SchemaIdVariable = schemaIdVariable;
            }
        }

        private void LogError(SqlConnection connection, string projectName, string errorMessage)
        {
            string errorLogQuery = "INSERT INTO ETL.Claims_ErrorLog (LogTimeStamp, PackageName, Message, IsError) VALUES (@LogTimeStamp, @PackageName, @Message, @IsError)";

            using (SqlCommand errorLogCommand = new SqlCommand(errorLogQuery, connection))
            {
                errorLogCommand.Parameters.AddWithValue("@LogTimeStamp", DateTime.Now);
                errorLogCommand.Parameters.AddWithValue("@PackageName", projectName);
                errorLogCommand.Parameters.AddWithValue("@Message", errorMessage);
                errorLogCommand.Parameters.AddWithValue("@IsError", 1); //Hardcoded value.
                errorLogCommand.ExecuteNonQuery();

            }
        }

        //private void LogSuccess(SqlConnection connection, string packageName, string successMessage)
        //{
        //    string logQuery = "INSERT INTO ETL.Claims_Log (LogTimeStamp, PackageName, Message, IsError) VALUES (@LogTimeStamp, @PackageName, @Messagem @IsError)";

        //    using (SqlCommand logCommand = new SqlCommand(logQuery, connection))
        //    {
        //        logCommand.Parameters.AddWithValue("@LogTimeStamp", DateTime.Now);
        //        logCommand.Parameters.AddWithValue("@PackageName", packageName);
        //        logCommand.Parameters.AddWithValue("@Message", successMessage);
        //        logCommand.Parameters.AddWithValue("@IsError", 0); //Hardcoded value.
        //        logCommand.ExecuteNonQuery();

        //    }
        //}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

    }
}
