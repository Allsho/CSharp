public void Main()
{
    SqlTransaction transaction = null;
    SqlConnection connection = null;

    try
    {
        string packageName = Dts.Variables["System::PackageName"].Value.ToString();

        // List of Payors with their SSIS variable names
        var payors = new List<Payor>
        {
            new Payor("CSHH_PCMH",     "User::SourceCSHHPCMH",     "User::DestPCMH",     "User::SchemaCSHHPCMH"),
            new Payor("FH_PCMH",       "User::SourceFHPCMH",       "User::DestPCMH",     "User::SchemaFHPCMH"),
            new Payor("NEMG_PCMH",     "User::SourceNEMGPCMH",     "User::DestPCMH",     "User::SchemaNEMGPCMH"),
            new Payor("NEMG_UHC",      "User::SourceUHC",          "User::DestNEMGUHC",  "User::SchemaNEMGUHC"), // Shares a source folder with YM
            new Payor("NEMG_Wellcare", "User::SourceNEMGWellcare", "User::DestWellcare", "User::SchemaNEMGWellcare"),
            new Payor("YM_Aetna",      "User::SourceYMAetna",      "User::DestYMAetna",  "User::SchemaYMAetna"),
            new Payor("YM_UHC",        "User::SourceUHC",          "User::DestYMUHC",    "User::SchemaYMUHC"),
            new Payor("NEMG_Cigna",    "User::SourceCigna",        "User::DestNEMGCigna","User::SchemaNEMGCigna"),
            new Payor("CPCT",          "User::SourceCPCT",         "User::DestCPCT",     "User::SchemaCPCT"),
            new Payor("YM_Cigna",      "User::SourceCigna",        "User::DestYMCigna",  "User::SchemaYMCigna")

        };

        string connectionString = Dts.Variables["User::ProjectClaimsConnection"].Value.ToString();
        string sqlTableName = Dts.Variables["User::SQLTableName"].Value.ToString();

        connection = new SqlConnection(connectionString);
        connection.Open();

        // Start a transaction
        transaction = connection.BeginTransaction();

        foreach (var payor in payors)
        {
            string sourceDirectory = Dts.Variables[payor.SourceVariable].Value.ToString();
            string destinationDirectory = Dts.Variables[payor.DestinationVariable].Value.ToString();
            int schemaId = (int)Dts.Variables[payor.SchemaIdVariable].Value;

            // Retrieve the list of file names from the SQL Server table
            string query = $"SELECT FileName FROM {sqlTableName} WHERE SchemaId = @SchemaId";
            SqlCommand command = new SqlCommand(query, connection, transaction);
            command.Parameters.AddWithValue("@SchemaId", schemaId);
            SqlDataReader reader = command.ExecuteReader();

            // Create a HashSet to store the existing file names
            var existingFiles = new HashSet<string>();

            while (reader.Read())
            {
                string fileName = reader.GetString(0);
                existingFiles.Add(fileName);
            }

            reader.Close();

            // Check each file in the source directory
            foreach (string filePath in Directory.GetFiles(sourceDirectory))
            {
                string fileName = Path.GetFileName(filePath);
                DateTime lastWriteTime = File.GetLastWriteTime(filePath);

                // Check if the file was modified in the last 30 days
                if (lastWriteTime < DateTime.Now.AddDays(-30))
                {
                    continue; // Skip files older than 30 days
                }
                else if (schemaId == 6 && !fileName.ToLower().Contains("enroll"))
                {
                    continue; // Skip non-membership files for YM_Aetna
                }
                else if (schemaId == 1 && !fileName.ToLower().Contains("nemg"))
                {
                    if (!fileName.ToLower().Contains("northeast"))
                    {
                        continue; // Skip non-nemg files for NEMG UHC
                    }
                }
                else if (schemaId == 7 && !fileName.ToLower().Contains("yale"))
                {
                    continue; // Skip non-yale files for YM UHC
                }
                else if (schemaId == 8 && !fileName.ToLower().Contains("cigna_ma"))
                {
                    if (!fileName.ToLower().Contains("stars"))
                    {
                        continue; // Skip non-nemg files for NEMG Cigna MA
                    }
                }
                else if (schemaId == 10 && !fileName.ToLower().Contains("cigna_comm"))
                {
                    continue; // Skip non-yale files for YM Cigna Comm
                }

                try
                {
                    // Check if the file already exists in the SQL Server table
                    if (!existingFiles.Contains(fileName))
                    {
                        // Insert the new file, current datetime, and PayorId into the SQL Server table
                        query = $"INSERT INTO {sqlTableName} (SchemaId, SchemaName, FileName, CopiedDate) VALUES (@SchemaId, @SchemaName, @FileName, @InsertDateTime)";
                        command = new SqlCommand(query, connection, transaction);
                        command.Parameters.AddWithValue("@SchemaId", schemaId);
                        command.Parameters.AddWithValue("@SchemaName", payor.Name);
                        command.Parameters.AddWithValue("@FileName", fileName);
                        command.Parameters.AddWithValue("@InsertDateTime", DateTime.Now);
                        command.ExecuteNonQuery();

                        // Then copy if the file already exists in the SQL Server table
                        string destinationPath = Path.Combine(destinationDirectory, fileName);
                        File.Copy(filePath, destinationPath);

                        bool fireAgain = true;
                        Dts.Events.FireInformation(0, "SSIS", $"File '{fileName}' copied and recorded successfully for {payor.Name}.", "", 0, ref fireAgain);

                        //Log success
                        LogMessage(connectionString, payor.Name, $"File '{fileName}' coped and recorded successfully for {payor.Name}.", false);
                    }
                }
                catch (Exception ex)
                {
                    Dts.Events.FireError(0, "SSIS", $"An error occured: {ex.Message}", "", 0);
                    // Log the error in the ETL.Claims_ErrorLog table
                    LogMessage(connectionString, payor.Name, ex.Message, true);
                    throw; //Rethrow the exception to trigger the transaction rollback
                }
            }
        }

        // Commit the transaction if all opertions are successful
        transaction.Commit();
        Dts.TaskResult = (int)ScriptResults.Success;
    }
    catch (Exception ex)
    {
        // Rollback the transaction in case of an exceptions
        if (transaction != null)
        {
            transaction.Rollback();
        }

        Dts.Events.FireError(0, "SSIS", $"An error occured: {ex.Message}", "", 0);
        Dts.TaskResult = (int)ScriptResults.Failure;
    }
    finally
    {
        // Close the connection
        if (connection != null)
        {
            connection.Close();
        }
    }
}

private class Payor
{
    public string Name { get; }

    public string SourceVariable { get; }

    public string DestinationVariable { get; }

    public string SchemaIdVariable { get; }

    public Payor(string name, string sourceVariable, string destinationVariable, string schemaIdVariable)
    {
        Name = name;
        SourceVariable = sourceVariable;
        DestinationVariable = destinationVariable;
        SchemaIdVariable = schemaIdVariable;
    }
}

private void LogMessage(string connectionString, string projectName, string message, bool isError)
{
    string logQuery = "INSERT INTO DBO.Claims_Log (LogTimeStamp, PackageName, Message, IsError) VALUES (@LogTimeStamp, @PackageName, @Message, @IsError)";

    using (SqlConnection logConnection = new SqlConnection(connectionString))
    {
        logConnection.Open();

        using (SqlCommand logCommand = new SqlCommand(logQuery, logConnection))
        {
            try
            {
                logCommand.Parameters.AddWithValue("@LogTimeStamp", DateTime.Now);
                logCommand.Parameters.AddWithValue("@PackageName", projectName);
                logCommand.Parameters.AddWithValue("@Message", message);
                logCommand.Parameters.AddWithValue("@IsError", isError ? 1 : 0);
                bool fireAgain = true;
                Dts.Events.FireInformation(0, "SSIS", $"Attempt to log message: {message}", "", 0, ref fireAgain);
                logCommand.ExecuteNonQuery();
                Dts.Events.FireInformation(0, "SSIS", $"Log message executed successfully. Message: {message}, IsError {isError}", "", 0, ref fireAgain);
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "SSIS", $"Failed to log message: {ex.Message}", "", 0);
            }
        }
    }
}
